<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4006 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4006.xml">
<!ENTITY RFC4006 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7068.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY RFC7068 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7068.xml'>
<!ENTITY I-D.ietf-dime-ovli PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dime-ovli-02.xml'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="DOIC-Endpoints-00" ipr="trust200902">
<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
<!-- ***** FRONT MATTER ***** -->
  <front>
<!-- The abbreviated title is used in the page header - it is only necessary if the
  full title is longer than 39 characters -->
    <title abbrev="Abbreviated Title">Analysis of Diameter Endpoint Alternatives</title>
<!-- add 'role="editor"' below for the editors if appropriate -->
<!-- Another author who claims to be an editor -->
    <author fullname="Steve Donovan" initials="S.R."
     surname="Donovan">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street/>
<!-- Reorder these if your country does things differently -->
          <city>Frisco</city>
          <region>Texas</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone>+1</phone>
        <email>srdonovan@usdonovans.com</email>
<!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Ben Campbell" initials="B."
     surname="Campbell">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street/>
<!-- Reorder these if your country does things differently -->
          <city>Frisco</city>
          <region>Texas</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone>+1</phone>
        <email>ben@nostrum.com</email>
<!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date month="April" year="2014" />
<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
  in the current day for you. If only the current year is specified, xml2rfc will fill
    in the current day and month for you. If the year is not the current one, it is
    necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
    purpose of calculating the expiry date).  With drafts it is normally sufficient to
    specify just the year. -->
<!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
<!-- WG name at the upperleft corner of the doc,
  IETF is fine for individual submissions.
    If this element is not present, the default is "Network Working Group",
  which is used by the RFC Editor as a nod to the history of the IETF. -->
    <keyword>template</keyword>
<!-- Keywords will be incorporated into HTML output
  files in a meta tag but they have no effect on text or nroff
  output. If you submit your draft to the RFC Editor, the
  keywords will be used for the search engine. -->
    <abstract>
      <t>
       The Diameter Overload Information Conveyance (DOIC) solution describes
       a mechanism for exchanging information about Diameter Overload among
       Diameter nodes. DOIC defines the concept of DOIC endpoints. A DOIC
       endpoint is a Diameter node that acts as either a reporting node are a
       reacting node. A reporting node originates overload reports, requesting
       reacting nodes to reduce the amount of traffic sent. The type of
       overload report determines the scope of the request for traffic
       reduction. The current definition of DOIC endpoints is ambiguous,
       resulting in differing assumptions about the implementation of the DOIC
       solution. This document describes two common interpretations of DOIC
       endpoints and analyzes how the two approaches address various Diameter
       overload use cases and deployment scenarios.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" title="Introduction">
      <t>
       The Diameter Overload Information Conveyance (DOIC) solution describes
       a mechanism for exchanging information about Diameter Overload among
       Diameter nodes. DOIC defines the concept of DOIC endpoints. A DOIC
       endpoint is a Diameter node that acts as either a reporting node or a
       reacting node. A reporting node originates overload reports, requesting
       reacting nodes to reduce the amount of traffic sent. The type of
       overload report determines the scope of the request for traffic
       reduction. The current definition of DOIC endpoints is ambiguous,
       resulting in differing assumptions about the implementation of the DOIC
       solution. This document describes two common interpretations of DOIC
       endpoints and analyzes how the two approaches address various Diameter
       overload use cases and deployment scenarios.
      </t>
      <t>
       DOIC endpoints do not necessarily correspond to Diameter clients and
       servers. Any Diameter node that supports DOIC can be a DOIC endpoint.
       This includes Diameter agents, as well as Diameter clients and servers.
       A pair of DOIC endpoints that exchange overload information, as well as
       information about DOIC support, can be said to share a DOIC
       association.
      </t>
      <t>
       The two interpretations of DOIC endpoints and the resulting
       associations are summarized as follows:
      </t>
      <t>
       <list style="symbols">
         <t hangText="Per-Report-type">
          The per report model implies there is a DOIC association per
          report-type that can be originated. With this model there can be
          multiple associations generated as a result of a single Diameter
          transaction. See <xref target="perReport"/> for more information on
          this model.
         </t>
         <t hangText="Per DOIC Node">
          The per node model implies that there is a DOIC association between
          each pair of Diameter nodes that support the DOIC solution. With
          this model a transaction can only create a single association
          between any two Diameter nodes, but there can be a chain of
          associations between the originator of the Diameter transaction
          (typically a Diameter Client) and the responder to the Diameter
          transaction (typically a Diameter Server). See
          <xref target="perNode"/> for more information on this model.
         </t>
         <t>
          [ben: Add the model acronyms here if we stick with them.]
         </t>
       </list>
      </t>
      <t>
       The current DOIC specification <xref target="I-D.ietf-dime-ovli"/> does
       not fully specify the the semantics associated with the DOIC endpoint
       concept. It is also possible that additional syntax will be required.
      </t>
      <t>
       This document outlines an example deployment and multiple use cases
       that can be used to evaluate how those use cases would be implemented
       using the two assumed endpoint architectures.
      </t>
    </section>
    <section title="Terminology and Abbreviations">
      <t>
       <list style="hanging">
         <t hangText="Diameter Node:">
          A Diameter client, agent or server.
         </t>
         <t hangText="DOIC Endpoint:">
          A Diameter node that supports the DOIC solution and acts as either a
          reporting node, a reacting node, or both.
         </t>
         <t hangText="DOIC Association:">
          The relationship between a DOIC reacting node and a reporting node.
          A pair of associated DOIC endpoints share state, including
          information such as the fact that the opposite endpoint supports
          DOIC, the DOIC related capabilities of each endpoint, current
          overload state of the reporting node, etc. Certain abatement
          algorithms may require DOIC nodes to store algorithm-specific state.
         </t>
         <t>
           [steve: the overload state of the reporting node isn't necessarily
           part of the association state.  maybe overload state received over the
           association is the more general way of saying this.]
         </t>
         <t hangText="Overload Abatement:">
          Actions taken by a reacting node to reduce the load offered to an
          overloaded Diameter node. The specific actions required to perform
          overload abatement are described by the DOIC algorithm. Overload
          abatement actions may involve local traffic reduction, or delegation
          of actions towards the client.
         </t>
         <t hangText="Reacting node:">
          A DOIC endpoint that can receive overload reports from a reporting
          node, and perform overload abatement. A DOIC endpoint can
          simultaneously be both a reacting node and reporting node.
         </t>
         <t hangText="Reporting node:">
          A DOIC endpoint that can send overload reports to a reacting node,
          requesting the reacting node to perform overload abatement.
         </t>
       </list>
      </t>
    </section>
    <section anchor="end" title="DOIC Endpoints">
      <t>
        [steve: we might want to divide this into a section defining reacting
        nodes and a section defining reporting nodes.]
      </t>
      <t>
       DOIC endpoints are defined in <xref target="I-D.ietf-dime-ovli"/>. A
       DOIC association is the logical relationship between a pair of Diameter
       endpoints. A DOIC endpoint can be a reacting node or a reporting node.
        The same Diameter node can be a reporting node for a set of associations and
        a reacting node for a different set of associations.
      </t>
      <t>
        A reporting node is the entity that sends overload reports,
        requesting a reduction in the amount of Diameter traffic sent to the
        node.
      </t>
      <t>
        A reacting node is the entity that receives the overload report,
        and performs needed overload abatement actions.
      </t>
      <t>
       <list>
         <t>
          A reacting node is also a DOIC supporting node that originates or
          relays Diameter requests, while a reporting node responds to or
          relays Diameter requests. This is a side effect of the solution
          choice of imbedding overload reports in Diameter answers, but not
          Diameter requests. Since Diameter supports bidirectional
          transactions, a node may simultaneously be a reacting node for
          transactions in one direction, and a reporting node for the other.
         </t>
         <t>
          This bidirectional nature makes it possible for a Diameter server to
          be a reacting node and for a Diameter client to be a reporting node.
          There are multiple examples of Diameter applications which require
          Diameter servers to originate requests toward Diameter clients.
          There are also examples where the Diameter transactions are between
          two Diameter servers, further confusing the concept of Diameter
          clients and servers.
         </t>
       </list>
      </t>
      <t>
       In the most basic case a reacting node will be a Diameter client and a
       reporting node will be a Diameter server. When a Diameter server
       determines that it is handling too much traffic, it sends an overload
       report to the reacting node. The reacting node is responsible for
       reducing the amount of traffic sent to the reporting node based on the
       contents of the overload report.
      </t>
      <t>
       In the more general case, a Diameter agent can take on the role of a
       reacting node that receives reports from upstream reporting nodes, and
       that of a reporting node that sends reports to downstream a reacting
       nodes. This can be useful in situations where some or all downstream
       clients or upstream servers do not support DOIC.
      </t>
      <t>
       <list>
         <t>
          <xref target="I-D.ietf-dime-ovli"/> does not limit agents to only
          act as DOIC endpoints on behalf of clients or servers that do not
          support DOIC. There may be other cases where operators may choose to
          deploy agents intermediate DOIC associations between clients and
          servers. For example, to handle mismatched capabilities, or to
          reduce the number of DOIC associations maintained by Diameter
          servers.
         </t>
       </list>
      </t>
      <t>
       The DOIC endpoint relationship is established during the DOIC
       capability exchange. The flow of the message establishes which entity
       is the reacting node and which is the reporting node for the DOIC
       association(s) established by the Diameter transaction. The originator
       of the request message is not always the reacting node and the entity
       the originates the answer message is not always the reporting node.
       This is due to the need to support a Diameter network that has a mix of
       nodes that support the DOIC extension and those that don't. There are
       also report types being considered where agents are required to be the
       reporting node (both realm reports defined in
       <xref target="I-D.ietf-dime-ovli"/> and peer reports defined in
       <xref target="agent-overload"/>).
      </t>
      <section title="Host Reports">
        <t>
          Host reports are sent to decrease the amount of
          traffic targeted for a particular Diameter node.  The Diameter
          node to which the report applies is identified by the Destination-Host
          AVP of the request carrying the overload report.
        </t>
        <t><list><t>
          Note: Diameter Clients and Diameter servers can originate host reports.
          For example, for the Diameter application defined in <xref target="RFC4006"/>,
          a Diameter server sending a host report will control the amount of CCR
          traffic routed to the server.  An RFC4006 client sending a host report
          will control the amount of RAR traffic routed to the client.
        </t></list></t>
        <t>
          Diamter supports two primary methods for routing requests to a reporting
          node.  The first is routing based on the Destination-Host AVP and the
          second is routing based on the Destination-Realm AVP.  In order to achieve
          the desired reduction in traffic indicated in a host report, there must
          be a reduction in requests routed using both mechanisms.
        </t>
        <t>
          In a basic deployment involving only Diameter clients and Diamter servers,
          the node sending requests can limit both types of requests.  The abatement
          in this case includes requests with a Destination-Host AVP that matches
          an active and relevant overload report plus requests that do not contain
          a Destination-Host AVP and that would be routed on a connection to
          the server that advertised the Diameter ID that is contained in the overlaod
          report.
        </t>
        <t>
          In deployments that involve agents, the node sending requests cannot
          limit both types of requests.  It can still abate traffic that includes
          a Destination-Host AVP, as it knows which requests of that type will be
          routed to the reporting node.  The originator of the request does not,
          however, have any way of knowing which of the realm-routed requests
          will be routed to the reporting node.  This is the job of the agent
          sitting one hop before the reporting node.  In this case the agent
          must be the reacting node for realm-routed requests that would be routed
          to a node that sent a host report.
        </t>
        <t>
          In deployments such as that outlined in <xref target="deploy"/>, there
          can be three types of reacting nodes for a single host report.
        </t>
        <t>
          Consider the case where server S3 sends a host report to all requests
          received for a specific application.  Assume also that client C1 supports
          the DOIC solution but that client C2 does not.
        </t>
          <t><list><t>
            This scenario is discussed in more detail in <xref target="uc-non"/>.
          </t></list></t>
        <t>
          Client C1 will be a reacting node with the responsibility for abating
          Destination-Host AVP routed requests it originates.
        </t>
        <t>
          Agent A1 will be a reacting node with the responsibility for abating
          Destination-Host AVP routed requests originated by client A2.
        </t>
        <t>
          Agent A2 will be a reacting node with the responsibility for abating
          realm-routed requests that would otherwise be routed the server S3.
        </t>
      </section>
      <section title="Realm Reports">
        <t>
          [steve: similar discussion as for host reports.]
        </t>
      </section>
      <section title="Peer Reports">
        <t>
          [steve: similar discussion as for host reports.]
        </t>
      </section>
    </section>
    <section anchor="deploy" title="Deployment Architecture">
      <t>
       This section outlines the deployment architecture that is used to
       evaluate the two DOIC endpoint architectures.
      </t>
      <t>
       This deployment architecture includes the use of Diameter agents to
       route Diameter requests between Diameter clients and Diameter servers.
       This architecture also assumes that the Diameter servers are
       partitioned in a fashion that requires Diameter requests to be routed
       through multiple agents.
      </t>
      <t>
       [steve: I removed "All Diameter nodes in this deployment architecture
       are assumed to support the DOIC solution."]
      </t>
      <t>
       Note that only two partitions of the Diameter servers are shown. This
       is bending to the limitations of ascii art for drawing complex
       deployment scenarios. It is possible, and even likely, that real world
       deployments will have many more that two partitions of the servers for
       a Diameter application.
      </t>
      <t>
       Note also that this document does not discuss deployments that do not
       involve agents, as there is no effective difference between the Per
       Report endpoint architecture and the Per Node endpoint architecture
       with an agentless deployment scenario.
      </t>
      <figure anchor="deploy-arch">
        <artwork><![CDATA[

      +--+                +--+ -\
      |C1|-----      -----|S1|   |
      +--+     \+--+/     +--+   |
                |A1|              > Server Partition 1
      +--+     /+--+\     +--+   |
      |C2|-----  ||  -----|S2|   |
      +--+       ||       +--+ -/
                 ||
      +--+       ||       +--+ -\
      |C3|-----  ||  -----|S3|   |
      +--+     \+--+/     +--+   |
                |A2|              > Server Partition 2
      +--+     /+--+\     +--+   |
      |C4|-----      -----|S4|   |
      +--+                +--+ -/


     ]]>
        </artwork>
      </figure>
    </section>
    <section title="Solution Alternatives">
      <section anchor="perReport" title="Per Report Type Associations">
        <t>
         The Per Report Type Architecture (PRTA) implies that there is set of
         a DOIC associations for each report type. For instance, in the
         deployment architecture illustrated in <xref target="deploy"/> there
         would be a DOIC association between each client and each server for
         the host reports that are generated by the server.
        </t>
        <t>
         [ben: I propose s/architecture/model. Architecture is heavier than
         necessary.]
        </t>
        <t>
         [steve: I'm ok with model.]
        </t>
        <t>
         [ben: I'm going to get lost in the PRTA vs PDNA language. The
         acronyms are two similar. Can we just spell it out, or come up with
         shorter mnemonic names? I'm also not confident that we've captured
         the real essence of the two models. I think we really have 3, that
         could be described as e2e, hbh, and hybrid or mixed. PDNA is hbh.
         PRTA is hybrid, where a given report type can be e2e or hbh. (I don't
         think anyone still believes in a strictly e2e model, although the
         recent CT3 contribs may prove otherwise.) I know hbh is a loaded
         term--but it may still be the best term.]
        </t>
        <t>
         [steve: I don't see e2e as being in play and don't see the need to
         complicate the process by discussing it. I also think we can put too
         much into the name, the descriptions are what matter. How about the
         Per Report Model (PRM) and the DOIC Node Model (DNM). Or how about
         model 1 (M1) and model 2 (m2).]
        </t>
        <t>
         There will also be a DOIC association between each client and each
         agent for realm reports, assuming that agents are responsible for
         sending realm overload reports.
        </t>
        <t>
         This discussion also includes the proposed architecture for agent
         overload. This is done to further illustrate the per report endpoint
         architecture, as the agent overload draft proposes the introduction
         of a new report type. Further extensions that introduce new report
         types would also add additional associations with the per report
         architecture.
        </t>
        <t>
         <xref target="per-report-agent"/> shows the associations that would
         result from a single transaction between a client, through an agent
         and to a server. This diagram shows four associations being created.
        </t>
        <t>
         QUESTION: DO WE DISCUSS THE "COST" OF EACH ASSOCIATION IN TERMS OF
         THE STATE THAT NEEDS TO BE STORED? IS THIS REALLY DIFFERENT BETWEEN
         THE TWO MODELS? HOW IS SEQUENCE NUMBER AND VALIDITY DURATION MANAGED
         IN THE PER NODE MODEL?
        </t>
        <t>
         [ben: I think we have to consider state. That will include at least
         the capabilities for each associated DOIC endpoint. For stateful
         abatement algorithms, it may be much more. For example, with a
         windowed algorithm, S might have to maintain a window for each client
         and agent in the entire network.]
        </t>
        <t>
         [steve: I've been thinking we need a "why does it matter" section.
         State handling would be one of the reasons it matters.]
        </t>
        <figure anchor="per-report-agent">
          <artwork><![CDATA[

      +-+                        +-+                        +-+
      |C|                        |A|                        |S|
      +-+                        +-+                        +-+
       |                          |                          |
       |--------------<DOIC Host Association>----------------|
       |                          |                          |
       |                          |-<DOIC Host Association>--|
       |                          |                          |
       |-<DOIC Realm Association>-|                          |
       |                          |                          |
       |-<DOIC Peer Association>--|-<DOIC Peer Association>--|
       |                          |                          |
     ]]>
          </artwork>
        </figure>
        <t>
         <xref target="per-report-agent2"/> shows the associations that would
         result from a single transaction between a client, through two agents
         and to a server. This results in eight associations.
        </t>
        <figure anchor="per-report-agent2">
          <artwork><![CDATA[

      +-+             +--+            +--+           +-+
      |C|             |A1|            |A1|           |S|
      +-+             +--+            +--+           +-+
       |               |               |               |
       |-----------------<Host Assoc>------------------|
       |               |               |               |
       |               |---------<Host Assoc>----------|
       |               |               |               |
       |               |               |-<HOST Assoc>--|
       |               |               |               |
       |-<Realm Assoc>-|               |               |
       |               |               |               |
       |--------<Realm Assoc>----------|               |
       |               |               |               |
       |-<Peer Assoc>--|-<Peer Assoc>--|-<Peer Assoc>--|
       |               |               |               |
     ]]>
          </artwork>
        </figure>
        <t>
         Table <xref target="perReportAssoc1"/> contains a list of  DOIC
         associations that result from the the deployment shown in
         <xref target="deploy-arch"/>, assuming that all nodes support DOIC.
         The table shows the associations for one of the clients, one of the
         agents and one of servers. The number of associations will be the
         other clients, agents and servers.
        </t>
        <t>
         <list>
           <t>
            Note that this analysis assumes that all nodes support DOIC and
            that all clients at some point initiate transactions with all
            servers and vice versa.
           </t>
         </list>
        </t>
        <texttable anchor="perReportAssoc1" title="Per Report Associations">
          <ttcol align="center">Reacting Node</ttcol>
          <ttcol align="center">Report Type</ttcol>
          <ttcol align="center">Association</ttcol>
          <ttcol align="center">Reporting Node</ttcol>
          <c>C1</c><c>Host</c><c>C1S1</c><c>S1</c>
          <c></c><c></c><c>C1S2</c><c>S2</c>
          <c></c><c></c><c>C1S3</c><c>S3</c>
          <c></c><c></c><c>C1S4</c><c>S4</c>
          <c></c><c>RRR</c><c>C1A1</c><c>A1</c>
          <c></c><c></c><c>C1A2</c><c>A2</c>
          <c></c><c>Peer</c><c>C1A1</c><c>A1</c>
          <c>S1</c><c>Host</c><c>S1C1</c><c>C1</c>
          <c></c><c></c><c>S1C2</c><c>C2</c>
          <c></c><c></c><c>S1C3</c><c>C3</c>
          <c></c><c></c><c>S1C4</c><c>C4</c>
          <c></c><c>RRR</c><c>S1A1</c><c>A1</c>
          <c></c><c></c><c>S1A2</c><c>A1</c>
          <c></c><c>Peer</c><c>S1A1</c><c>A1</c>
          <c>A1</c><c>Host</c><c>A1C1</c><c>C1</c>
          <c></c><c></c><c>A1C2</c><c>C2</c>
          <c></c><c></c><c>A1C3</c><c>C3</c>
          <c></c><c></c><c>A1C4</c><c>C4</c>
          <c></c><c></c><c>A1S1</c><c>S1</c>
          <c></c><c></c><c>A1S2</c><c>S2</c>
          <c></c><c></c><c>A1S3</c><c>S3</c>
          <c></c><c></c><c>A1S4</c><c>S4</c>
          <c></c><c>RRR</c><c>A1A2</c><c>A2</c>
          <c></c><c>Peer</c><c>A1C1</c><c>C1</c>
          <c></c><c></c><c>A1C2</c><c>C2</c>
          <c></c><c></c><c>A1S1</c><c>S1</c>
          <c></c><c></c><c>A1S2</c><c>S2</c>
        </texttable>
      </section>
      <section anchor="perNode" title="Per DOIC Node Associations">
        <t>
         The Per DOIC Node Architecture (PDNA) assumes there will be a single
         association between adjacent nodes that support the DOIC solution.
        </t>
        <t>
         The per node architecture is illustrated in
         <xref target="per-node-agent"/> for deployments that include a
         single agent.  This shows the associations that result from a
         single transaction that traverses one agent.  This model results in
         two associations.
        </t>
        <t>
         With this architecture, all reports types are processed by the first
         reacting node that receives the report. What the reacting node does
         with the report depends on the report type combined with local
         policy. For instance, an agent that receives a host report from the
         server could do any of the following:
        </t>
        <t>
         <list style="symbols">
           <t>
            If the agent determines that there is capacity in other servers
            that can handle the traffic reduction requested by the server then
            the agent can consume the report, with the mitigation action being
            to re-route the requested percentage of traffic to other servers.
            [ben: This comes perilously close to the RRR vs Realm discussion,
            since it would normally be possible only for realm-routed
            requests.]
           </t>
           <t>
            The agent can use the contents of the host report as input into
            routing decisions on realm-routed requests. The agent can then
            include a semantically equivalent host report in the answer.
           </t>
           <t>
            If the agent determines that there is no spare capacity in other
            servers then the agent can generate an equivalent host report and
            send it to the client. This report might be functionally identical
            to that sent by the server, but it is "from" the agent. In effect
            this could be considered passing the server report through to the
            client. Alternately, if there is non-zero spare capacity in other
            servers, but not enough to re-route all traffic, the agent might
            calculate a different reduction percentage, and send a different
            "host" report towards the client. [ben: I'd like to wedgie the
            concept of "abatement by delegation" in here somewhere.]
           </t>
           <t>
            If local policy allows then the agent could always "pass-through"
            the host report without taking any other action.
           </t>
           <t>
            If the agent has a full view of all servers supporting the
            application-id then the agent could use the contents of the report
            to generate a realm report. In this case it is possible the answer
            message could contain both a host and a realm report.
           </t>
         </list>
        </t>
        <figure anchor="per-node-agent">
          <artwork><![CDATA[

      +-+                        +-+                        +-+
      |C|                        |A|                        |S|
      +-+                        +-+                        +-+
       |                          |                          |
       |----<DOIC Association>----|----<DOIC Association>----|
       |                          |                          |
     ]]>
          </artwork>
        </figure>
        <t>
         <xref target="per-node-agent2"/> shows the associations that result from a
         single transaction that traverses one agent.  This model results in
         three associations.
        </t>
        <t><list><t>
          Note that one advantage of this model is that the number of DOIC associations
          managed by any Diameter node is constrained by the number of DOIC supporting Diameter nodes
          with which it communicates.  The addition of additional agents in the path between
          the client and server does not result in additional associations as is the case
          with the per report model.
        </t></list></t>
        <figure anchor="per-node-agent2">
          <artwork><![CDATA[

      +-+             +--+            +--+           +-+
      |C|             |A1|            |A1|           |S|
      +-+             +--+            +--+           +-+
       |               |               |               |
       |-<DOIC Assoc>--|-<DOIC Assoc>--|-<DOIC Assoc>--|
       |               |               |               |
     ]]>
          </artwork>
        </figure>
        <t>
         Table <xref target="perNodeAssoc1"/> contains a list of all DOIC
         associations that result from the the deployment shown in
         <xref target="deploy-arch"/>, assuming that all nodes support DOIC.
         The table shows the associations for one of the clients, one of the
         agents and one of servers. The number of associations will be the
         other clients, agents and servers.
        </t>
        <t>
          [steve; this table is a better way of showing the associations by showing which nodes are
          reacting and reporting nodes for the association.  need to update the previous table to show
          the same.]
        </t>
        <texttable anchor="perNodeAssoc1" title="Per Report Associations">
          <ttcol align="center">Reacting Node</ttcol>
          <ttcol align="center">Associations</ttcol>
          <ttcol align="center">Reporting Node</ttcol>
          <c>C1</c>
          <c>C1A1</c>
          <c>A1</c>
          <c>A1</c>
          <c>A1S1</c>
          <c>S1</c>
          <c>S1</c>
          <c>S1A1</c>
          <c>A1</c>
          <c>A1</c>
          <c>A1C1</c>
          <c>C1</c>
        </texttable>
        <t>
         <xref target="perNodeAssoc2"/> contains a list of all DOIC
         asssociations generated by transactions between clients and servers
         when the transactions traverse two agents.
        </t>
        <texttable anchor="perNodeAssoc2" title="Per Report Associations">
          <ttcol align="center">Reacting Node</ttcol>
          <ttcol align="center">Associations</ttcol>
          <ttcol align="center">Reporting Node</ttcol>
          <c>C1</c>
          <c>C1A1</c>
          <c>A2</c>
          <c>A1</c>
          <c>A1A2</c>
          <c>A2</c>
          <c>A2</c>
          <c>A2S1</c>
          <c>S1</c>
          <c>S1</c>
          <c>S1A2</c>
          <c>A2</c>
          <c>A2</c>
          <c>A2A1</c>
          <c>A1</c>
          <c>A1</c>
          <c>A1C1</c>
          <c>C1</c>
        </texttable>
      </section>
    </section>
    <section title="Use Cases">
      <t>
       This section outlines example use cases. Each of the endpoint
       architectures will then be evaluated against each of these use cases,
       showing how the use case would be implemented with that architecture
       and identifying any gaps in the current DOIC specification.
      </t>
      <t>
       The following is the list of use cases considered. This is not an
       exhaustive list of DOIC use cases but is rather a list of use cases
       identified as being impacted by the definition of the definition of
       DOIC endpoints and DOIC associations.
      </t>
      <t>
       <list style="symbols">
         <t>
          Basic DOIC capability exchange
         </t>
         <t>
          DOIC host overload report handling
         </t>
         <t>
          DOIC end-to-end security
         </t>
         <t>
          Non supporting Diameter nodes
         </t>
         <t>
          Multiple and mixed abatement algorithm support
         </t>
         <t>
          Support for rate and other stateful abatement algorithms
         </t>
         <t>
          Support for targeted overload reports
         </t>
         <t>
          Support for a chain of agents
         </t>
         <t>
          PCC style cross application dependencies
         </t>
       </list>
      </t>
      <section anchor="uc-basic" title="Use Case - Basic DOIC Capability Advertisement">
        <section title="Description">
          <t>
           This use case is included to illustrate the basic case resulting
           from DOIC Capability Advertisement where the servers advertise
           support for the lost algorithm.
          </t>
	       <t><list style="symbols">
	         <t>
	           Clients and agents advertising separate and potentially different capabilities.
	           For instance, the client might support just the loss algorithm while the agent
	           supports both the loss and rate algorithms.
	         </t>
	       </list>
	       </t>
          <t>
           This use case is meant to illustrate the DOIC associations that are
           established as a result of the two endpoint architectures.
          </t>
        </section>
        <section title="PRTA Handling">
          <t>
           <xref target="pr-uc-basic"/> illustrates the message flow
           associated with this use case when using the per-report-type
           endpoint architecture. This use case assumes that host overload
           reports will be generated by the server and realm overload report
           will be generated by the agent. This also assumes that the client,
           server and agent have advertised support for the peer overload
           report, as proposed in the agent overload draft.
          </t>
          <t>
           <list>
             <t>
              Note: This assumes that two separate OC-Supported-Features AVPs
              are included, one for the client OC capabilities and a second
              for the agent OC capabilities. At the time of this writing this
              syntax has not been agreed. The information could also be
              included in one OC-Supported-Features AVP but the behavior
              required is independent of the syntax.
             </t>
           </list>
          </t>
          <t>
           <list>
             <t>
              Question: How is the Realm association advertised? There is
              currently nothing in the OC-Supported-Features AVP to indicate
              that the agent will be sending Realm overload reports. Should
              this be added?
             </t>
             <t>
              [ben: From an OC-Supported-Features perspective, we only need to
              put it in if it needs to be negotiated. Right now, I think the
              client has to assume that any reporting node can send host
              and/or realm reports. This makes me even more skeptical if
              per-report-type is really what we are talking about.
              Theoretically, nothing prevents S from sending realm reports to
              C, either. I think we are really talking about e2e vs p2p vs a
              combination. e2e is not sufficiently flexible, combo is really
              complicated, doic-peer2doic-peer seems to work.]
             </t>
             <t>
               [steve: i can see an advantage of reporting nodes advertising which
               types of reports they will send.  this can help a reacting node to
               know which associations to listen to for realm and rrr reports.  i don't
               think we are talking about e2e.  the report model says there needs to be
               an association per report type that can be sent over the association.]
             </t>
           </list>
          </t>
          <figure anchor="pr-uc-basic">
            <artwork><![CDATA[

     +-+                        +-+                        +-+
     |C|                        |A|                        |S|
     +-+                        +-+                        +-+
      |                          |                          |
      |-- xxR OC-S-F:C---------->|                          |
      |                          |                          |
      |                          |-- xxR OC-S-F:C---------->|
      |                          |       OC-S-F:A           |
      |                          |                          |
      |                          |<---------- xxA OC-S-F:SC-|
      |                          |                OC-S-F:SA |
      |                          |                          |
      |                          |==<DOIC Host Association>=|
      |                          |==<DOIC Peer Association>=|
      |                          |                          |
      |<-------- xxA OC-S-F:SC --|                          |
      |              OC-S-F:AC   |                          |
      |                          |                          |
      |==============<DOIC Host Association>================|
      |                          |                          |
      |=<DOIC Realm Association>=|                          |
      |=<DOIC Peer Association>==|                          |
      |                          |                          |

|- xxR OC-S-F:C ----->|- xxR OC-S-F:C ----->|- xxR OC-S-F:C ----->|

		]]>
            </artwork>
          </figure>
<figure anchor="pr-uc-basic2">
  <artwork><![CDATA[

   +-+                   +--+                  +--+                  +-+
   |C|                   |A1|                  |A2|                  |S|
   +-+                   +--+                  +--+                  +-+
    |                     |                     |                     |
    |- xxR OC-S-F:C ----->|                     |                     |
    |                     |- xxR OC-S-F:C ----->|                     |
    |                     |      OC-S-F:A1      |                     |
    |                     |                     |- xxR OC-S-F:C ----->|
    |                     |                     |      OC-S-F:A1      |
    |                     |                     |      OC-S-F:A2      |
    |                     |                     |                     |
    |                     |                     |<--- xxA OC-S-F:SC --|
    |                     |                     |         OC-S-F:SA1  |
    |                     |                     |         OC-S-F:SA2  |
    |                     |                     |                     |
    |                     |                     |==<DOIC Host Assoc>==|
    |                     |                     |==<DOIC Peer Assoc>==|
    |                     |<--- xxA OC-S-F:SC --|                     |
    |                     |         OC-S-F:SA1  |                     |
    |                     |         OC-S-F:A2A1 |                     |
    |                     |                     |                     |
    |                     |=============<DOIC Host Assoc>=============|
    |                     |==<DOIC Peer Assoc>==|                     |
    |                     |                     |                     |
    |<--- xxA OC-S-F:SC --|                     |                     |
    |         OC-S-F:A1C  |                     |                     |
    |                     |                     |                     |
    |========================<DOIC Host Assoc>========================|
    |=============<DOIC Realm Assoc>============|                     |
    |==<DOIC Realm Assoc>=|                     |                     |
    |==<DOIC Peer Assoc>==|                     |                     |
    |                     |                     |                     |

]]>
  </artwork>
</figure>
          <t>
           [ben: why do we need both a peer and host association between A and
           S?]
          </t>
          <t>
           [steve: because this is the per report type model. its there by
           definition.]
          </t>
          <t>
           [ben: Doesn't that imply another peer report association between C
           and A?.]
          </t>
          <t>
           Each DOIC endpoint must learn the capabilities of each endpoint
           with which it shares an association. In the per-report-type
           architecture, S must learn the capabilities of C and A, C must
           learn of A and S, and A must learn of C and S. Since
           <xref target="I-D.ietf-dime-ovli">DOIC</xref> requires each
           endpoint to insert its capabilities into every Diameter message, A
           must insert its own OC-Supported-Features AVP into the messages
           that traverse it, while preserving that sent by C or S. It further
           must remove the AVP that S sends in response to the one it inserted
           before it reaches the client. This implies that C and S must be
           prepared to receive multiple OC-Supported-Feature values, and be
           able to determine the identity of the source of each one.
          </t>
          <t>
           <list>
             <t>
              Note: <xref target="I-D.ietf-dime-ovli">DOIC</xref> does not
              currently support attribution of an OC-Supported-AVP to the node
              that originated it.
             </t>
             <t>
              QUESTION: WHAT IF THERE IS A CHAIN OF AGENTS. DOES EACH AGENT
              INSERT ITS OWN OC-SUPPORTED-FEATURES AVP? [Ben: Each agent needs
              to insert it's own. The question is, whether it also passes
              through one from a downstream agent. I think it does, or it
              least MAY. Otherwise, we would have to require an agent to
              determine whether a received OC-Feature-Vector came from an
              agent or a client.]
             </t>
           </list>
          </t>
          <t>
           Additionally, each DOIC endpoint must keep state to remember the
           capabilities of each endpoint with which it shares a DOIC
           association. In this example, those associations are fully meshed.
           While this example shows a trivial network, the number of
           associations can become very large in larger networks.
          </t>
          <t>
           The need for a full capabilities mesh becomes more apparent if the
           selected capabilities are different between C and A than between A
           and S. <xref target="pr-uc-mixed"/> illustrates this scenario
          </t>
          <figure anchor="pr-uc-mixed">
            <artwork><![CDATA[

	     +-+                        +-+                        +-+
	     |C|                        |A|                        |S|
	     +-+                        +-+                        +-+
	      |                          |                          |
	      |-- xxR C:loss ----------->|                          |
	      |                          |                          |
	      |                          |-- xxR C:loss ----------->|
	      |                          |       A:loss,rate        |
	      |                          |                          |
	      |                          |<---------- xxA SC:loss --|
	      |                          |                SA:rate   |
	      |                          |                          |
	      |                          |=====<Rate Algorithm>=====|
	      |                          |                          |
	      |<-------- xxA SC:loss ----|                          |
	      |              AC:loss     |                          |
	      |                          |                          |
	      |=================<Loss Algorithm>====================|
	      |                          |                          |
	      |====<Loss Algorithm>======|                          |
	      |                          |                          |

			]]>
            </artwork>
          </figure>
          <t>
           In this example, C supports only the "loss" abatement algorithm. A
           supports "loss", and also an algorithm called "rate". S supports
           both, but prefers to use "rate" whenever possible. C includes the
           loss algorithm in its OC-Supported-Features AVP (C). A passes C's
           capabilities through to S, but also inserts its own
           OC-Supported-Features AVP (A) indicating support for both loss and
           rate. S has no option but to use loss for OLRs sent to C, so it
           includes the loss algorithm in the corresponding
           OC-Supported-Features AVP (SC). Since A also supports the rate
           algorithm, S selects rate in the OC-Supported-Features AVP (SA) it
           sends in response to that sent by A.
          </t>
          <t>
           A can now send OLRs using the loss algorithm to C, and OLRs using
           the rate algorithm to A. A can only send send OLRs using the loss
           algorithm to C, (likely as needed to fulfill its obligations to S
           under the rate algorithm.)
          </t>
        </section>
        <section title="PDNA Handling">
          <t>
           <xref target="pn-uc-basic"/> shows a similar capabilities exchange
           using the per-endpoint model. Each DOIC endpoint has a single DOIC
           association with its peer endpoint. The peer endpoint is not
           necessarily the Diameter peer; rather it's the nearest Diameter
           node that supports DOIC along a given path.
          </t>
          <figure anchor="pn-uc-basic">
            <artwork><![CDATA[

         +-+                        +-+                        +-+
         |C|                        |A|                        |S|
         +-+                        +-+                        +-+
          |                          |                          |
          |-- xxR OC-S-F:C---------->|                          |
          |                          |                          |
          |                          |-- xxR OC-S-F ----------->|
          |                          |                          |
          |                          |<---------- xxA OC-S-F:S -|
          |                          |====<DOIC Association>====|
          |                          |                          |
          |<-------- xxA OC-S-F:A ---|                          |
          |====<DOIC Association>====|                          |
          |                          |                          |

]]>
            </artwork>
          </figure>
          <t>
           In this example, there are exactly two DOIC associations; one
           between C and A, and one between A and S. The selected features for
           each association are independent of the other. A acts as a
           back-to-back DOIC endpoint, that is, it becomes the reporting node
           to C, and the reacting node to S.
          </t>
          <t>
           <xref target="pn-uc-mixed"/> illustrates a per-node capabilities
           exchange where different algorithms are selected for each
           association. As in <xref target="pr-uc-mixed"/>, C supports the
           loss algorithm, A supports loss and rate, and S prefers rate.
          </t>
          <figure anchor="pn-uc-mixed">
            <artwork><![CDATA[

          +-+                        +-+                        +-+
          |C|                        |A|                        |S|
          +-+                        +-+                        +-+
           |                          |                          |
           |-- xxR C:loss------------>|                          |
           |                          |                          |
           |                          |-- xxR A:loss,rate ------>|
           |                          |                          |
           |                          |<---------- xxA S:rate ---|
           |                          |====<Rate Algorithm>======|
           |                          |                          |
           |<-------- xxA A:loss-- ---|                          |
           |====<Loss Algorithm>======|                          |
           |                          |                          |

		]]>
            </artwork>
          </figure>
          <t>
           C only includes "loss" in its OC-Supported-Features AVP. A removes
           C's AVP, and inserts its own, including both loss and rate. S
           selects the rate algorithm in its response to A. A removes S's AVP,
           and inserts its own, selecting the loss algorithm.
          </t>
          <t>
           As a result, S only sends OLRs using the rate algorithm. A can then
           send OLRs back towards the client, if needed to honor the rate
           limit it received from S.
          </t>
        </section>
      </section>
      <section anchor="uc-chained-caps" title="Use Case - Complex DOIC Capability Advertisement">
        <section title="Description">
          <t>
           This use case illustrates a more complex case resulting from
           capabilities advertisement across a chain of agents. Client C sends
           Diameter requests to Server S, via Agents A1 and A2.
          </t>
        </section>
        <section title="PRTA Handling">
          <figure anchor="ptraAssocChain">
            <artwork><![CDATA[

  +-+                        +--+                       +--+                       +-+
  |C|                        |A1|                       |A2|                       |S|
  +-+                        +--+                       +--+                       +-+
   |                          |                          |                          |
   |-- xxR OC-S-F:C---------->|                          |                          |
   |                          |                          |                          |
   |                          |-- xxR OC-S-F:C---------->|                          |
   |                          |       OC-S-F:A1          |                          |
   |                          |                          |-- xxR OC-S-F:C---------->|
   |                          |                          |       OC-S-F:A1          |          
   |                          |                          |       OC-S-F:A2          |
   |                          |                          |                          |
   |                          |                          |<----- xxA OC-S-F:S(C)----|
   |                          |                          |           OC-S-F:S(A1)   |          
   |                          |                          |           OC-S-F:S(A2)   |
   |                          |                          |                          |
   |                          |                          |==<DOIC Peer Association>=|
   |                          |                          |                          |
   |                          |                          |==<DOIC Host Association>=|
   |                          |                          |                          |
   |                          |<------ xxA OC-S-F:S(C) --|                          |
   |                          |            OC-S-F:S(A1)  |                          | 
   |                          |            OC-S-F:A2(C)  |                          |
   |                          |            OC-S-F:A2(A1) |                          |
   |                          |                          |                          |
   |                          |=<DOIC Peer Association>==|                          |
   |                          |                          |                          |
   |                          |=<DOIC Realm Association>=|                          |
   |                          |                          |                          |
   |                          |===============<DOIC Host Association>===============|
   |                          |                          |                          |
   |<------- xxA OC-S-F:S(C)--|                          |                          |
   |             OC-S-F:A2(C) |                          |                          |
   |             OC-S-F:A1(C) |                          |                          |
   |                          |                          |                          |
   |=<DOIC Peer Association>==|                          |
   |                          |                          |                          |
   |=<DOIC Realm Association>=|                          |
   |                          |                          |                          |
   |===============<DOIC Realm Association>==============|                          |
   |                          |                          |                          |
   |=============================<DOIC Host Association>============================|
   |                          |                          |                          |

			]]>
            </artwork>
          </figure>
          <t>
           <xref target="ptraAssocChain"/> illustrates the DOIC capabilities
           advertisement and resulting associations, based on the
           per-report-type model.
          </t>
          <t>
           OC-S-F:X indicates a OC-Supported-Features AVP that a client or
           agent inserts into a Diameter request, where "X" represents the
           node that inserts the AVP. OC-S-F:X(Y) indicates an
           OC-Supported-Features AVP that a server or agent inserts into a
           Diameter answer, in response to a specific OC-S-F AVP in the
           associated request. "X" represents the node that inserts the AVP,
           in response to the one originally inserted by "Y".
          </t>
          <t>
           As in <xref target="uc-basic"/>, the per-report-type model results
           in a full mesh of capabilities advertisements. This results in
           "host" associations C-S, A1-S, and A2-S, as well as "Realm"
           associations C-A1, C-A2, and A1-A2. Each adjacent pair of DOIC
           nodes have a "peer" association, for a total of nine associations.
          </t>
          <t>
           [ben: Can we generalize that the number of associations =
           (number_of_report_types) * (length_of_chain - 1)]
          </t>
        </section>
        <section title="PDNA Handling">
          <figure anchor="pdnaAssocChain">
            <artwork><![CDATA[

   +-+                        +--+                       +--+                       +-+
   |C|                        |A1|                       |A2|                       |S|
   +-+                        +--+                       +--+                       +-+
    |                          |                          |                          |
    |-- xxR OC-S-F:C---------->|                          |                          |
    |                          |                          |                          |
    |                          |-- xxR OC-S-F:A1--------->|                          |
    |                          |                          |                          |
    |                          |                          |-- xxR OC-S-F:A2--------->|
    |                          |                          |                          |
    |                          |                          |<----- xxA OC-S-F:S(A2)---|
    |                          |                          |                          |
    |                          |                          |====<DOIC Association>====|
    |                          |                          |                          |
    |                          |<---- xxA OC-S-F:A2(A1) --|                          |
    |                          |                          |                          |
    |                          |====<DOIC Association>====|                          |
    |                          |                          |                          |
    |                          |                          |                          |
    |<------ xxA OC-S-F:A1(C)--|                          |                          |
    |                          |                          |                          |
    |====<DOIC Association>====|                          |
    |                          |                          |                          |

			]]>
            </artwork>
          </figure>
          <t>
           <xref target="pdnaAssocChain"/> illustrates the DOIC capabilities
           advertisement for the same Diameter node chain, following the
           Per-Diameter-Node model assumptions. The OC-Supported-Features
           notation is the same as for the per-report-type example.
          </t>
          <t>
           The Per-Diameter-Node model results in a single
           OC-Supported-Features AVP in each Diameter request and answer. It
           creates a single DOIC association for each adjacent pair of DOIC
           nodes (three in this example).
          </t>
        </section>
      </section>
      <section anchor="uc-host" title="Use Case - DOIC Host Overload Report Handling">
        <section title="Description">
          <t>
           In this use case, assume that server S1 becomes overloaded and
           generates a host overload report. Assume for this case that the
           loss abatement algorithm is the only supported algorithm or that it
           was selected by the reporting node (S1) in the capabilities
           exchange.
          </t>
          <t>
           As a result of the host report, DOIC supporting clients are called
           on to reduce traffic by the percentage requested for requests that
           the client knows will be routed to the overloaded server.
          </t>
          <t>
           This use case also presumes that it is the responsibility of DOIC
           supporting agents to reduce the amount of realm-routed traffic to
           the overloaded reporting node.
          </t>
          <t>
           <list>
             <t>
              Note that at the time of writing this is an open issue in the
              DOIC specification but it is expected that there will be
              agreement that DOIC supporting agents need to react to host
              reports. As such, this use case assume clients will abate
              overload for host-routed requests and agents will abate overload
              for realm-routed requests.
             </t>
           </list>
          </t>
          <t>
           Any action taken by the agent must stay consistent with the
           requirement that throttling of Diameter transactions must happen as
           close to the originator of the transaction as possible. In the case
           of a host report, this generally means that DOIC clients should do
           most of the abatement that results in throttling. This is
           especially the case for host-routed requests.
          </t>
          <t>
           There are, however, actions that an agent can and should take.
           First, in the case when a client does not support DOIC, an agent
           that does support DOIC must do the throttling that would have been
           done by the client. This scenario is addressed in
           <xref target="uc-non"/>.
          </t>
          <t>
           The second action that can be taken by the agent is to use the
           contents of the host report as input to the routing of realm-routed
           requests.
          </t>
          <t>
           Finally, the agent will also need to be able to throttle
           realm-routed requests when there is not sufficient server capacity
           to handle 100% of realm-routed traffic.
          </t>
        </section>
        <section title="PRTA Handling">
          <t>
           Under the per-report-type model there are two DOIC associations
           established for host reports and one for realm reports as a result
           of a single capabilities exchange. This is illustrated in
           <xref target="ptraAssoc"/>.
          </t>
          <figure anchor="ptraAssoc">
            <artwork><![CDATA[

		      +-+                        +-+                        +-+
		      |C|                        |A|                        |S|
		      +-+                        +-+                        +-+
		       |                          |                          |
		       |-- xxR OC-S-F:C---------->|                          |
		       |                          |-- xxR OC-S-F:C---------->|
		       |                          |       OC-S-F:A           |
		       |                          |                          |
		       |                          |<---------- xxA OC-S-F:SC-|
		       |                          |                OC-S-F:SA |
		       |                          |                H-R:Loss  |
		       |                          |==<DOIC Host Association>=|
		       |                          |                          |
		       |<-------- xxA OC-S-F:SC --|                          |
		       |              OC-S-F:AC   |                          |
		       |              H-R:Loss    |                          |
		       |             [R-R:Loss]   |                          |
		       |                          |                          |
		       |=<DOIC Realm Association==|                          |
		       |                          |                          |
		       |==============<DOIC Host Association>================|
		       |                          |                          |
		       | Client abates host-      | Agent abates realm-      |
		       | routed traffic           | routed traffic           |
		       |                          |                          |

		]]>
            </artwork>
          </figure>
          <t>
           S sends a host-report using the loss algorithm. C begins to abate
           host-routed traffic bound for S. A abates realm-routed traffic to
           the degree it can do so by routing requests to other servers that
           support the given realm and application. If the number of
           realm-routed requests from C (and potentially from other clients)
           exceed this spare capacity, then A optionally sends a realm report
           to C. C would then abate realm-routed traffic.
          </t>
          <t>
           <list>
             <t>
              This brings up a question about how agents might learn of server
              overload conditions in order to generate "realm" reports. We
              assume that the agent inspects the realm-report prior to
              forwarding it towards the client. This further assumes that the
              realm-report is generic, that is, that it applies to all clients
              equally. If the working group chooses to make each host-report
              specific to a particular client, then this approach will not
              work.
             </t>
           </list>
          </t>
          <t>
           Figure <xref target="ptraAssoc2"/> illustrates the associations and
           behavior for requests that travel through two agents.
          </t>
          <t>
           [ben: Where are we taking this example? Will there be realm
           reports? Is A1 involved in any associations?]
          </t>
          <figure anchor="ptraAssoc2">
            <artwork><![CDATA[

   +-+                        +--+                       +--+                       +-+
   |C|                        |A1|                       |A2|                       |S|
   +-+                        +--+                       +--+                       +-+
    |                          |                          |                          |
    |-- xxR OC-S-F:C---------->|                          |                          |
    |                          |                          |                          |
    |                          |-- xxR OC-S-F:C---------->|                          |
    |                          |       OC-S-F:A           |                          |
    |                          |                          |-- xxR OC-S-F:C---------->|
    |                          |                          |       OC-S-F:A2          |
    |                          |                          |                          |
    |                          |                          |<----- xxR OC-S-F:C------>|
    |                          |                          |           OC-S-F:SA2     |
    |                          |                          |           OLR:Loss       |
    |                          |                          |==<DOIC Host Association>=|
    |                          |                          |                          |
    |                          |<--------- xxA OC-S-F:SC -|                          |
    |                          |               OC-S-F:A2A1|                          |
    |                          |               OLR:Loss   |                          |
    |                          |                          |                          |
    |                          |                          |                          |
    |<-------- xxA OC-S-F:SC --|                          |                          |
    |              OC-S-F:AC   |                          |                          |
    |              OLR:Loss    |                          |                          |
    |=============================<DOIC Host Association>============================|
    |                          |                          |                          |
    | Client abates host-      |                          | Agent 2 abates realm-    |
    | routed traffic           |                          | routed traffic           |
    |                          |                          |

		]]>
            </artwork>
          </figure>
        </section>
        <section title="PDNA Handling">
          <t>
           The per-DOIC-node architecture assumes there is a single
           association between adjacent DOIC nodes. This is illustrated in
           <xref target="pdnaAssoc3"/>.
          </t>
          <figure anchor="pdnaAssoc3">
            <artwork><![CDATA[

		      +-+                        +-+                        +-+
		      |C|                        |A|                        |S|
		      +-+                        +-+                        +-+
		       |                          |                          |
		       |-- xxR OC-S-F:C---------->|                          |
		       |                          |                          |
		       |                          |-- xxR OC-S-F:A---------->|
		       |                          |                          |
		       |                          |<---------- xxA OC-S-F:S -|
		       |                          |                OLR:Loss  |
		       |                          |====<DOIC Association>====|
		       |                          |                          |
		       |<-------- xxA OC-S-F:A ---|                          |
		       |              OLR:Loss    |                          |
		       |====<DOIC Association>====|
		       |                          |                          |
		       | Client abates host-      | Agent abates realm-      |
		       | routed traffic           | routed traffic           |
		       |                          |                          |

		]]>
            </artwork>
          </figure>
          <t/>
        </section>
      </section>
      <section title="Use Case - End-to-End Security">
        <section title="Description">
          <t>
           This use case is the same as <xref target="uc-basic"/> with the
           addition that it considers the impact of the likely Diameter
           end-to-end security mechanism.
          </t>
          <t>
           The assumption is that the security mechanism specified will
           specify that groups of AVPs will be signed -- to verify the
           identity of the originator of the AVPs -- and encrypted -- to
           ensure the privacy of the contents of the AVPS -- by the Diameter
           entities that insert the AVPs in to messages. This will generally
           be clients and servers but can also be agents. If this is the case
           then there are two alternatives that impact the DOIC solution:
          </t>
          <t>
           <list style="symbol">
             <t>
              The DOIC AVPs are signed and encrypted. If this is the case then
              there are impacts to the solution for <xref target="uc-basic"/>
              as there would be no means for agents to modify the existing
              contents of an OC-Supported-Features AVP.
             </t>
             <t>
              Note: This is not strictly true if the agent has access to the
              shared secret keys needed to decrypt the AVPs. If this is the
              case then clients and servers would need to understand that
              agents can change (and thus sign) AVPs if the pre-report
              architecture is selected. If the per-node architecture is
              selected then proxies wuld always be required to be able to
              decrypt received DOIC AVPs and encrypt DOIC AVPs in messages
              they forward.
             </t>
             <t>
              The DOIC AVPs are not signed and encrypted. This is a less
              secure mechanism that does introduce exposure in the general
              sense as insertion of OLR AVPs by a rouge element is an
              effective denial of service attack. Signing of the OLR AVPs is
              likely to be the the most effective mechanism to address this
              security risk.
             </t>
           </list>
          </t>
        </section>
        <section title="PRTA Handling">
          <t/>
        </section>
        <section title="PDNA Handling">
          <t/>
        </section>
      </section>
      <section anchor="uc-non" title="Use Case - Non Supporting Diameter Nodes">
        <section title="Description">
          <t>
           This use case deals with deployments that include agents and have a
           mix of Diameter clients that do not support the DOIC solution. This
           use case assumes that all servers and agents in the deployment do
           support the DOIC solution.
          </t>
          <t>
           <xref target="nonSupportingClients"/> illustrates this use case.
          </t>
          <figure anchor="nonSupportingClients">
            <artwork><![CDATA[

      +--+                +--+ -\
      |C1|-----      -----|S1|   |
      +--+     \+--+/     +--+   |
                |A1|              > Server Partition 1
      ****     /+--+\     +--+   |
      *C2*-----  ||  -----|S2|   |
      ****       ||       +--+ -/
                 ||
      ****       ||       +--+ -\
      *C3*-----  ||  -----|S3|   |
      ****     \+--+/     +--+   |
                |A2|              > Server Partition 2
      ****     /+--+\     +--+   |
      *C4*-----      -----|S4|   |
      ****                +--+ -/

     ]]>
            </artwork>
          </figure>
          <t>
           For this use case, assume Client C1 supports the DOIC solution and
           clients C2, C3 and C4 do not suppoort DOIC. Both agents and all
           servers also support DOIC.
          </t>
          <t>
           In this case, it is the responsibility of the agents to act on
           behalf of the non-supporting clients.
          </t>
          <t>
           Agent A1 is responsible for handling
           overload abatement for requests originating from client C2.
          </t>
          <t>
           Agent A2 is responsible for handling overload abagtement for requests originating from
           client C3 and C4.
          </t>
          <t>
            Note that client C1 is responsible for handling overload abatement for
            requests it originates.
          </t>
        </section>
        <section title="PRTA Handling">
          <t>
            <xref target="ucnonPRTA1"/> shows the host report DOIC associations that will result
            from this scenario.  Other report types associations are not addressed in this analysis.
            Associations from the server toward agents and clients are also not addressed in this analysis.
          </t>
        <texttable anchor="ucnonPRTA1" title="Non supporting clients - Per Report Associations">
          <ttcol align="center">Node</ttcol>
          <ttcol align="center">Report Type</ttcol>
          <ttcol align="center">Assoc</ttcol>
          <ttcol align="center">Behavior</ttcol>
          <c>C1</c><c>Host</c><c>C1S1</c>
          <c>For host reports received on the C1S1 association, C1 is responsible for abatement
             of all request traffic that would be routed to server S1.</c>
          <c></c><c></c><c></c><c></c>
          <c></c><c></c><c>C1S2</c>
          <c>For host reports received on the C1S2 association, C1 is responsible for abatement
             of all request traffic that would be routed to server S2</c>
          <c></c><c></c><c></c><c></c>
          <c></c><c></c><c>C1S3</c>
          <c>For host reports received on the C1S3 association, C1 is responsible for abatement
             of all request traffic that would be routed to server S3</c>
          <c></c><c></c><c></c><c></c>
          <c></c><c></c><c>C1S4</c>
          <c>For host reports received on the C1S4 association, C1 is responsible for abatement
             of all request traffic that would be routed to server S4</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A1</c>
            <c>Host</c>
            <c>A1S1</c>
            <c>For host reports received on the A1S1 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to server S1.  A1 is responsible
             for abatement of realm-routed requests from all clients that would be routed to server
             S1.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A1S2</c>
            <c>For host reports received on the A1S2 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to server S2.  A1 is responsible
             for abatement of realm-routed requests from all clients that would be routed to server
             S2.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A1S3</c>
            <c>For host reports received on the A1S3 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to server S3.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A1S4</c>
            <c>For host reports received on the A1S4 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to server S4.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A2</c>
            <c>Host</c>
            <c>A2S1</c>
            <c>For host reports received on the A2S1 association, A1 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to server S1.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A2S2</c>
            <c>For host reports received on the A2S2 association, A1 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to server S2.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A2S3</c>
            <c>For host reports received on the A2S3 association, A1 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to server S3.  A2 is responsible
             for abatement of realm-routed requests from all clients that would be routed to server
             S3.</c>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c/>
            <c>A2S4</c>
            <c>For host reports received on the A2S4 association, A1 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to server S4.  A2 is responsible
             for abatement of realm-routed requests from all clients that would be routed to server
             S4.</c>
        </texttable>
        <t>

        </t>


        </section>
        <section title="PDNA Handling">
          <t>
            <xref target="ucnonPDNA1"/> shows the host report DOIC associations that will result
            from this scenario.  Other report types associations are not addressed in this analysis.
            Associations from the server toward agents and clients are also not addressed in this analysis.
          </t>
        <texttable anchor="ucnonPDNA1" title="Non supporting clients - Per Node Associations">
          <ttcol align="center">Node</ttcol>
          <ttcol align="center">Assoc</ttcol>
          <ttcol align="center">Behavior</ttcol>
          <c>C1</c><c>C1A1</c>
          <c>For host reports received on the C1S1 association, C1 is responsible for abatement
             of all request traffic that would be routed to the server indicated in the report.</c>
          <c></c><c></c><c></c>
          <c>A1</c><c>A1A2</c>
          <c>For host reports received on the A1A2 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to the server indicated in the report.
             A1 is also responsible for passing the host report over the C1A1 association.</c>
          <c></c><c></c><c></c>
          <c></c><c>A1S1</c>
          <c>For host reports received on the A1S1 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to S1.  A1 is also responsible for
             passing the host report over the C1A1 association.</c>
          <c></c><c></c><c></c>
          <c></c><c>A1S2</c>
          <c>For host reports received on the A1S2 association, A1 is responsible for abatement
             of all request traffic from C2 that would be routed to S2.  A1 is also responsible for
             passing the host report over the C1A1 association.</c>
          <c></c><c></c><c></c>
          <c>A2</c><c>A2A1</c>
          <c>For host reports received on the A2A1 association, A2 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to the server indicated
             in the report.</c>
          <c></c><c></c><c></c>
          <c></c><c>A2S3</c>
          <c>For host reports received on the A2S3 association, A1 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to S2.  A1 is also responsible for
             passing the host report over the A1A2 association.</c>
          <c></c><c></c><c></c>
          <c></c><c>A2S4</c>
          <c>For host reports received on the A2S4 association, A1 is responsible for abatement
             of all request traffic from C3 and C4 that would be routed to S4.  A1 is also responsible for
             passing the host report over the A1A2 association.</c>
          </texttable>
        </section>
      </section>
      <section anchor="uc-alg" title="Use Case - Multiple and Mixed Abatement Algorithm Support">
        <section title="Description">
          <t>
           This use case focuses on the case where the a subset of clients
           support only the loss algorithm, some clients support both loss and
           rate, servers support and prefer rate. This implies that the server
           will select the rate algorithm any time that it sees a reacting
           node that supports rate.
          </t>
          <t>
           Assume for this case that the following is true:
          </t>
          <t>
           <list style="symbols">
             <t>
              C1 and C3 only support the loss algorithm.
             </t>
             <t>
              C2 and C4 support both the loss and rate algorithms.
             </t>
             <t>
              A1 and A2 support both the loss and the rate algorithms.
             </t>
             <t>
              S1 and S2 support both the loss and rate algorithms and will
              select the rate algorithm any time that support is indicated by
              a reacting node.
             </t>
           </list>
          </t>
          <t>
            This use case illustrates one instance where agents must be
            able to insert an OC-Supported-Features AVP containing information
            different then received from the client.  The assumption for this
            analysis is that the agent will insert a second OC-Supported-Features
            AVP.
          </t>
        </section>
        <section title="PRTA Handling">
          <t>
           <figure anchor="pr-uc-ma1">
             <artwork><![CDATA[

      +-+                        +-+                        +-+
      |C|                        |A|                        |S|
      +-+                        +-+                        +-+
       |                          |                          |
       |-- xxR OC-S-F ----------->|                          |
       |     feat1                |                          |
       |                          |                          |
       |                          |-- xxR OC-S-F ----------->|
       |                          |     feat1 + feat2        |
       |                          |         or               |
       |                          |-- xxR OC-S-F1, OS-S-F2-->|
       |                          |       client   agent     |
       |                          |       loss     loss+rate |
       |                          |                          |
       |                          |<----------- xxA OC-S-F --|
       |                          |               rate       |
       |                          |                          |
       |<----------- xxA OC-S-F --|                          |
       |               loss       |                          |
       |            or            |                          |
       |     overload handled     |                          |
       |         by agent         |                          |
       |                          |                          |
       |--------------<DOIC Host Association>----------------|
       |                          |                          |
       |-<DOIC Realm Association>-|                          |
       |                          |                          |
       |<-------------------------------------- xxA OC-OLR --|
       |                          |               host       |
       |                          |                          |
       |<----------- xxA OC-OLR --|                          |
       |               realm      |                          |
       |                          |                          |

]]>
             </artwork>
           </figure>
           <figure anchor="pr-uc-ma2">
             <artwork><![CDATA[

      +-+                        +-+                        +-+
      |C|                        |A|                        |S|
      +-+                        +-+                        +-+
       |                          |                          |
       |-- xxR OC-S-F ----------->|                          |
       |     loss                 |                          |
       |                          |                          |
       |                          |-- xxR OC-S-F ----------->|
       |                          |     loss + rate          |
       |                          |         or               |
       |                          |-- xxR OC-S-F1, OS-S-F2-->|
       |                          |       client   agent     |
       |                          |       loss     loss+rate |
       |                          |                          |
       |                          |<----------- xxA OC-S-F --|
       |                          |               rate       |
       |                          |                          |
       |<----------- xxA OC-S-F --|                          |
       |               loss       |                          |
       |            or            |                          |
       |     overload handled     |                          |
       |         by agent         |                          |
       |                          |                          |
       |--------------<DOIC Host Association>----------------|
       |                          |                          |
       |-<DOIC Realm Association>-|                          |
       |                          |                          |
       |<-------------------------------------- xxA OC-OLR --|
       |                          |               host       |
       |                          |                          |
       |<----------- xxA OC-OLR --|                          |
       |               realm      |                          |
       |                          |                          |

]]>
             </artwork>
           </figure>
          </t>
        </section>
        <section title="PDNA Handling">
          <t>
           <figure anchor="pn-uc-ma1">
             <artwork><![CDATA[

      +-+                        +-+                        +-+
      |C|                        |A|                        |S|
      +-+                        +-+                        +-+
       |                          |                          |
       |-- xxR OC-S-F ----------->|                          |
       |     loss                 |                          |
       |                          |                          |
       |                          |-- xxR OC-S-F ----------->|
       |                          |     loss + rate          |
       |                          |                          |
       |                          |<----------- xxA OC-S-F --|
       |                          |               rate       |
       |                          |                          |
       |   Agent handled overload |                          |
       |      mitigation plus     |                          |
       |       (optionally)       |                          |
       |                          |                          |
       |<----------- xxA OC-S-F --|                          |
       |               loss       |                          |
       |                          |                          |

]]>
             </artwork>
           </figure>
          </t>
        </section>
      </section>
      <section title="Use Case - Stateful Abatement Algorithms">
        <section title="Description">
          <t>
            The loss algorithm defined in <xref target="I-D.ietf-dime-ovli"/> is
            a stateless overload abatement algorithm.  This means that no history
            of previous transactions needs to be kept in order to immediately apply
            the loss algorithm upon receipt of an overload report.
          </t>
          <t>
            There are overload abatement algorithms envisioned and discussed in
            <xref target="RFC7068"/> that require the reacting node to maintain a
            history of requests sent over a period of time to be able to properly
            handle overload reports.  The rate and windowing algorithms are examples
            of abatement algorithms that might require keeping a history of the rate
            of transactions sent over the most immediate period of time.
          </t>
          <t>
            This section explores the implication of a stateful abatement algorithm
            on the two endpoint models.
          </t>
        </section>
        <section title="PRTA Handling">
          <t/>
        </section>
        <section title="PDNA Handling">
          <t/>
        </section>
      </section>
      <section title="Use Case - Targeted Overload Reports">
        <section title="Description">
          <t>
            The ability to target an overlaod report to a specific reacting node
            is currently being discussed.
          </t>
          <t><list><t>
            Note that at the time of this writing the DOIC solution does not
            support the ability to target overload report.  There is general
            consensus that this would be a useful thing for DOIC to support but
            there is not agreement as to whether this should be in the base
            specification or treated as an extension.
          </t></list></t>
          <t>
            The primary basis of this feature would be the ability to throttle
            traffic from a specific, potentially misbehaving, reacting node.  For
            example, if a single Diameter client is generating a larger than normal
            amount of traffic when all other clients are generating normal traffic,
            the Diameter server might want to send an overload report that impacts
            only the traffic from the client generating the large amount of traffic.
          </t>
        </section>
        <section title="PRTA Handling">
          <t/>
        </section>
        <section title="PDNA Handling">
          <t/>
        </section>
      </section>
      <section title="Use Case - Chain of Agents">
        <section title="Description">
          <t/>
        </section>
        <section title="PRTA Handling">
          <t/>
        </section>
        <section title="PDNA Handling">
          <t/>
        </section>
      </section>
      <section title="Use Case - Cross Application Dependencies">
        <section title="Description">
          <t>
            [steve: after thinking about pcc i'm not convinced this is a separate
            scenarios.  The cross application dependencies is nothing more that a change
            in the way that a route is selected.  overload abatement treatment needs to
            happen after a route is selected and applied if the selected route matches an
            active overload report.  overload abatement should not care about how the
            route is selected.]
          </t>
          <t>
           This use case illustrates the PCC architecture where the PCC
           defined DRA creates bindings for a user and uses that binding to
           route new policy sessions associated with that binding.
          </t>
          <t>
           This use case is unique in that a Diameter overload report on one
           application can impact the DRAs handling of requests for another
           application. For instance, if an overload report is received as a
           result of a GX CCR request, that could result in the DRA throtting
           Rx requests from a completely different Diameter client.
          </t>
          <t/>
        </section>
        <section title="PRTA Handling">
          <t/>
        </section>
        <section title="PDNA Handling">
          <t/>
        </section>
      </section>
      <section title="Use Case - Hidden Failed Server">
        <section title="Description">
          <t>
           This use case, illustrated in <xref target="fig-failed"/> explores
           the impact on the DOIC end point architecture of the case when a
           server (or more generally, a Diameter endpoint) that sits behind
           one or more agents fail.
          </t>
          <figure anchor="fig-failed">
            <artwork><![CDATA[

	      +--+                ****
	      |C1|-----      -----*S1* <--- This server is OOS
	      +--+     \+--+/     ****
	                |A1|
	      +--+     /+--+\     +--+
	      |C2|-----  ||  -----|S2|
	      +--+       ||       +--+
	                 ||
	      +--+       ||       +--+
	      |C3|-----  ||  -----|S3|
	      +--+     \+--+/     +--+
	                |A2|
	      +--+     /+--+\     +--+
	      |C4|-----      -----|S4|
	      +--+                +--+


	     ]]>
            </artwork>
          </figure>
          <t>
           In this case, other Diameter nodes will not have a direct view of
           the state of the server. By default, clients attempting to send
           requests to a failed server will get an Unable-to-Deliver error
           response from the agent that sits in front of the failed server.
          </t>
          <t>
           It needs to be considered whether the best way to handle this
           scenario would be for the agent to generate a host overload report
           requesting a 100% reduction in traffic to the failed server and, if
           so, how this impacts the DOIC endpoint architecture.
          </t>
        </section>
      </section>
    </section>
    <section title="Analysis of Per-Report-Type Endpoint Architecture">
      <section title="Client Impacts"/>
      <section title="Server Impacts"/>
      <section title="Agent Impacts"/>
    </section>
    <section title="Analysis of Per-Node Endpoint Architecture">
      <section title="Client Impacts"/>
      <section title="Server Impacts"/>
      <section title="Agent Impacts"/>
    </section>
    <section title="Comparison">
      <section title="Per-Report-Type Architecture">
        <t>
         Table of pros and cons.
        </t>
      </section>
      <section title="Per-Node Architecture">
        <t>
         Table of pros and cons.
        </t>
      </section>
    </section>
    <section title="Recommendation">
      <t>
       This section is to be completed once the document has been reviewed.
      </t>
    </section>
    <section title="Security Considerations"/>
  </middle>
  <back>
<!-- References split into informative and normative -->
<!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
 (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References">
		&I-D.ietf-dime-ovli;
    &RFC4006;
       <reference anchor='agent-overload'>
        <front>
          <title>Diameter Agent Overload</title>
          <author initials="S." surname="Donovan">
            <organization abbrev="Oracle">
                Oracle
                </organization>
          </author>
          <date month="March" year="2014"/>
        </front>
        <format type="TXT" octets="94506" target="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-donovan-dime-agent-overload-01.xml"/>
      </reference>
    </references>
    <references title="Informative References">
<!-- Here we use entities that we defined at the beginning. -->

      &RFC2629;

      &RFC3552;

      &RFC7068;

      <!-- A reference written by by an organization not a person.

      <reference anchor="DOMINATION"
   target="http://www.example.com/dominator.html">
 <front>
   <title>Ultimate Plan for Taking Over the World</title>

   <author>
     <organization>Mad Dominators, Inc.</organization>
   </author>

   <date year="1984" />
 </front>
      </reference>

      -->
    </references>
    <section anchor="app-additional" title="Additional Stuff">
      <t>
       This becomes an Appendix.
      </t>
    </section>
  </back>
</rfc>
