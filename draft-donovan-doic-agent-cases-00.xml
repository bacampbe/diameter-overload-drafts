<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4006 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4006.xml">
<!ENTITY RFC6733 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6733.xml">
<!ENTITY RFC7086 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7068.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY RFC7068 PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7068.xml'>
<!ENTITY I-D.ietf-dime-ovli PUBLIC ''
'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dime-ovli-02.xml'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-donovan-doic-agent-cases-00" ipr="trust200902">
<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
<!-- ***** FRONT MATTER ***** -->
  <front>
<!-- The abbreviated title is used in the page header - it is only necessary if the
  full title is longer than 39 characters -->
    <title abbrev="Abbreviated Title">Analysis of Agent Use Cases
      for Diameter Overload Information Conveyance (DOIC)</title>
<!-- add 'role="editor"' below for the editors if appropriate -->
<!-- Another author who claims to be an editor -->
    <author fullname="Steve Donovan" initials="S.R."
     surname="Donovan">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street/>
<!-- Reorder these if your country does things differently -->
          <city>Frisco</city>
          <region>Texas</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone>+1</phone>
        <email>srdonovan@usdonovans.com</email>
<!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Ben Campbell" initials="B."
     surname="Campbell">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street/>
<!-- Reorder these if your country does things differently -->
          <city>Frisco</city>
          <region>Texas</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone>+1</phone>
        <email>ben@nostrum.com</email>
<!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date month="April" year="2014" />
<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
  in the current day for you. If only the current year is specified, xml2rfc will fill
    in the current day and month for you. If the year is not the current one, it is
    necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
    purpose of calculating the expiry date).  With drafts it is normally sufficient to
    specify just the year. -->
<!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
<!-- WG name at the upperleft corner of the doc,
  IETF is fine for individual submissions.
    If this element is not present, the default is "Network Working Group",
  which is used by the RFC Editor as a nod to the history of the IETF. -->
    <keyword>template</keyword>
<!-- Keywords will be incorporated into HTML output
  files in a meta tag but they have no effect on text or nroff
  output. If you submit your draft to the RFC Editor, the
  keywords will be used for the search engine. -->
    <abstract>
      <t>
       The Diameter Overload Information Conveyance (DOIC) solution describes
       a mechanism for exchanging information about Diameter Overload among
       Diameter nodes. A DOIC endpoint is a Diameter node that acts as either
       a reporting node are a reacting node. A reporting node originates
       overload reports, requesting reacting nodes to reduce the amount of
       traffic sent. DOIC allows Diameter agents to act as reporting nodes,
       reacting nodes, or both, but does not describe agent behavior. This
       document explores several use cases for agents to participate in
       overload control, and makes recommendations for certain agent behaviors
       to be added to DOIC.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" title="Introduction">
      <t>
       The <xref target="I-D.ietf-dime-ovli"> Diameter Overload Information
       Conveyance (DOIC) </xref> solution describes a mechanism for exchanging
       diameter overload information among Diameter nodes. DOIC defines the
       concept of a DOIC endpoint. A DOIC endpoint is a Diameter node that
       acts as either a reporting node or a reacting node. A reporting node
       originates overload reports, requesting reacting nodes to reduce the
       offered load. An overload report has a "type". The type of overload
       report determines the scope of the request for traffic reduction, and
       possibly other semantics.
      </t>
      <t>
       DOIC endpoints do not necessarily correspond to Diameter clients and
       servers. Any Diameter node that supports DOIC can be a DOIC endpoint.
       This includes Diameter agents, as well as Diameter clients and servers.
       However, DOIC does not currently describe how agents should behave as
       part of an overload control solution. This document explores several
       use cases for agents to participate in overload control, and makes
       recommendations for certain agent behaviors to be added to DOIC.
      </t>
      <section title="Terminology and Abbreviations">
        <t>
         <list style="hanging">
           <t hangText="Diameter Node:">
            A Diameter client, agent or server.
           </t>
           <t hangText="DOIC Endpoint:">
            A Diameter node that supports the DOIC solution and acts as either
            a reporting node, a reacting node, or both.
           </t>
           <t hangText="Reacting node:">
            A DOIC endpoint that can receive overload reports from a reporting
            node, and perform overload abatement. A DOIC endpoint can
            simultaneously be both a reacting node and reporting node.
           </t>
           <t hangText="Reporting node:">
            A DOIC endpoint that can send overload reports to a reacting node,
            requesting the reacting node to perform overload abatement.
           </t>
           <t hangText="Overload Abatement:">
            Actions taken by a reacting node to reduce the load offered to an
            overloaded Diameter node. The specific actions required to perform
            overload abatement are described by the DOIC algorithm. Overload
            abatement actions may involve local traffic reduction, or
            delegation of actions towards the client. Local traffic reduction
            can be achieved by either throttling a request or routing a
            request to a different destination.
           </t>
           <t>
            [steve: should we have a definition of throttling?]
           </t>
         </list>
        </t>
      </section>
    </section>
    <section anchor="deploy" title="Deployment Architecture">
      <t>
       This section outlines the deployment architectures used to
       determine agent related Diameter DOIC requirements.
      </t>
      <t>
       These deployment architectures include the use of Diameter agents to
       route Diameter requests between Diameter clients and Diameter servers.
      </t>
      <t>
        <xref target="deploy-arch1"/> shows an architecture with a single agent
        sitting between Diameter clients and Diamter servers.
      </t>
      <figure anchor="deploy-arch1">
        <artwork><![CDATA[

      +--+                +--+
      |C1|-----      -----|S1|
      +--+     \+--+/     +--+
                |A1|
      +--+     /+--+\     +--+
      |C2|-----      -----|S2|
      +--+                +--+


      ]]>
        </artwork>
      </figure>

      <t>
        <xref target="deploy-arch2"/> shows an architecture with a multiple agents
        sitting between Diameter clients and Diamter servers.
      </t>
      <figure anchor="deploy-arch2">
        <artwork><![CDATA[

      +--+                          +--+
      |C1|-----                -----|S1|
      +--+     \+--+      +--+/     +--+
                |A1|------|A2|
      +--+     /+--+      +--+\     +--+
      |C2|-----                -----|S2|
      +--+                          +--+


      ]]>
        </artwork>
      </figure>

      <t>
        <xref target="deploy-arch3"/> shows an architecture with the servers
        partitioned, with agents sitting in front of each partition.  This use
        case illustrates one instance where individual agents do not have a view
        of the overload status of all servers in the network.
      </t>
      <figure anchor="deploy-arch3">
        <artwork><![CDATA[

      +--+                +--+ -\
      |C1|-----      -----|S1|   |
      +--+     \+--+/     +--+   |
                |A1|              > Server Partition 1
      +--+     /+--+\     +--+   |
      |C2|-----  ||  -----|S2|   |
      +--+       ||       +--+ -/
                 ||
      +--+       ||       +--+ -\
      |C3|-----  ||  -----|S3|   |
      +--+     \+--+/     +--+   |
                |A2|              > Server Partition 2
      +--+     /+--+\     +--+   |
      |C4|-----      -----|S4|   |
      +--+                +--+ -/


     ]]>
        </artwork>
      </figure>
      <t><list><t>
       Note that only two partitions of the Diameter servers are shown. This
       is bending to the limitations of ASCII art for drawing complex
       deployment scenarios. It is possible, and even likely, that real world
       deployments will have more that two partitions of the servers for
       a Diameter application.
      </t></list></t>
      <t>
       This document focuses on deployments that involve agents.  It is, however,
       important that any changes to the DOIC solution introduced to support networks
       that contain agents also work when there is no agent sitting between Diameter
       clients and servers.
      </t>
    </section>

    <section anchor="reporttypes" title="Diameter Routing">
      <t>
       Diameter supports <xref target="RFC6733">two primary methods</xref> for
       routing requests to a reporting node. Normally, Diameter nodes route
       requests based on the Destination-Realm and Application-Id AVP values.
       That is, they select the next hop from their Diameter route table entry
       that matches the realm and application of the request. For the sake of
       this analysis, we refer to requests routed by this method as
       "realm-routed requests"
      </t>
      <t>
       A Diameter node may also control the final destination of a request by
       inserting a Destination-Host AVP. When a node forwards a request that
       includes Destination-Host, it checks to see if it has a matching
       Diameter identity in its peer table. If so, it forwards the request to
       that peer. Otherwise, it follows the normal routing for the realm and
       application. We refer to requesta routed this way as "host-routed
       requests".
      </t>
      <t>
       When a Diameter node becomes overloaded, there typically must be a
       reduction of the number requests of both categories, in order to have
       the desired reduction of the overall offered-load. Typically the only
       way to reduce host-routed requests is by throttling some number of
       them. Throttling is best done as close to the request origin as
       possible. The originator is usually in the best position to
       intelligently throttle. The further from from the origin that
       throttling occurs, the more network resources are expended on routing
       and responding to requests that do not result in useful work.
      </t>
      <t>
       On the other hand, since realm routed requests are not targeted to a
       particular server, it may be possible to reroute them to other servers
       that are less overloaded. Rerouting should typically occur as close to
       the destination as possible (commonly at an agent). Nodes closest to
       the destination will typically have more knowledge about available the
       realm topology and capacity.
      </t>
      <t>
        [steve: We might want to illustrate this, showing that a client rerouting
        can result in the request going to the same overloaded server.  Or is
        this just obvious?]
      </t>
    </section>
    <section title="DOIC Agent Use Cases">
      <t>
       [ToDo: High level intro to use cases]
      </t>
      <t>
       This section outlines example use cases. Each of the endpoint
       models will then be evaluated against each of these use cases,
       showing how the use case would be implemented using that model
       and identifying any gaps in the current DOIC specification.
      </t>
      <t>
       The following is the list of use cases considered. This is not an
       exhaustive list of DOIC use cases but is rather a list of use cases
       identified as being impacted by the definition of the definition of
       DOIC endpoints and DOIC associations.
      </t>
      <t>
       <list style="symbols">
         <t>
           Simple Agent - Overload capability exchange and overload report handling
           in a deployment with a single agent as illustrated in
           <xref target="deploy-arch1"/>.  In this case all Diameter nodes
           are assumed to support DOIC.  This use case is discussed in
           <xref target="uc-simple"/>.
         </t>
         <t>
           Chain of Agents - Overload capability exchange and overload report
           handling in a deployment with multiple agents between reacting nodes
           and reporting nodes as illustrated in <xref target="deploy-arch2"/>.
           In this case all Diameter nodes are assumed to support DOIC.
           This use case is discussed in
           <xref target="uc-chain"/>.
         </t>
         <t>
           Partitioned Servers - Overlaod capability exchange and overload report
           handling in a deployment using partitioned servers as illustrated
           in <xref target="deploy-arch3"/>.  In this case all Diameter nodes
           are assumed to support DOIC.This use case is discussed in
           <xref target="uc-partition"/>.
         </t>
         <t>
           Mixed Capabilities - Overload capability exchange and overload report
           handling in deployments where agents support capabilities that are
           not included in the set of capabilities advertised by reacting
           nodes.This use case is discussed in
           <xref target="uc-mixedcaps"/>.
         </t>
         <t>
           Non supporting DOIC nodes - Agent behavior in the face of Diameter
           nodes that do not support the DOIC solution.  These use cases are
           addressed in This use case is discussed in
           <xref target="uc-non-supporting"/>.  There are four sub-use
           cases that are addressed:
         </t>
         <t><list style="symbols">
           <t>
             Non supporting reacting node.  In this case a DOIC supporting agent
             should handle overload abatement for the non supporting node.  An
             agent or a reporting node can detect if there is a reacting node
             in the path a request takes by the presence of the OC-Supported-Features
             AVP in the request message.This use case is discussed in
             <xref target="uc-nsclient"/>.
           </t>
           <t>
             Non supporting reporting node.  In this case a DOIC supporting agent
             may act as the reporting node for any upstream non supporting Diameter
             nodes (client or servers depending on the direction of the request.
             In this case a DOIC supporting agent can detect if there is a reporting
             node in the path
             of the transaction by the presence of the OC-Supported-Features AVP
             in the answer message for the transaction.This use case is discussed in
             <xref target="uc-nsserver"/>.
           </t>
           <t>
             Non supporting agent between reacting node and a supporting agent. [steve:
             it isn't clear on a Friday afternoon what different agent behavior this
             use case drives.]
           </t>
           <t>
             Non supporting agent between a supporting agent and the reporting node.
             In this case, the agent that supports DOIC cannot reliably re-route
             requests as a result of a host report.This use case is discussed in
             <xref target="uc-nsagent"/>.
           </t>
         </list></t>
         <t>
           Support for targeted overload reports [steve: only needed if this makes
           it into the based DOIC specification.]
         </t>
       </list>
      </t>

      <section anchor="uc-simple" title="Simple Agent">
        <t>
         [single agent, all nodes support DOIC, same features. Clients
         throttle host-routed requests, agent reroutes realm-routed requests
         (and maybe sends realm reports.)]
        </t>
        <t>
          This section addresses overload capability exchange and overload report handling
          in a deployment with a single agent as illustrated in
          <xref target="deploy-arch1"/>.
        </t>
        <t>
          This use case assumes that all nodes support DOIC and that all nodes
          support the same set of overload features.
        </t>
        <section title="Capability Exchange">
          <t>
            This section explores the capability exchange requirements for the
            simple agent use case.
          </t>
          <t>
            <xref target="pr-uc-basic1"/> shows the message flow for this use case.
          </t>
          <figure anchor="pr-uc-basic1">
            <artwork><![CDATA[

       +-+                        +-+                        +-+
       |C|                        |A|                        |S|
       +-+                        +-+                        +-+
        |                          |                          |
  1>    |-- xxR OC-S-F:C---------->|                          |
        |                          |                          |
  2>    |                          |-- xxR OC-S-F:C---------->|
        |                          |                          |
  3>    |                          |<---------- xxA OC-S-F:S--|
        |                          |                          |
  4>    |<-------- xxA OC-S-F:S----|                          |
        |                          |                          |
    ]]>
            </artwork>
          </figure>
          <t>
            <list style="numbers">
              <t>
                The client originates a request and, as a result, is the reacting
                node for this transaction.  The client supports DOIC and, as
                such, includes the OC-Supported-Features AVP in all requests.  The
                OC-S-F AVP contains the clients capabilities.
              </t>
              <t>
                The agent inspects the OC-S-F AVP and determines that the agent
                does not support additional OC features.  The agent relays the
                request unchanged to the server.
              </t>
              <t>
                The server, acting as the reporting node, inspects the OC-S-F AVP in
                the request and generates an OC-S-F to be included in the answer
                message.  This is done according to the behavior defined in the
                DOIC specification <xref target="I-D.ietf-dime-ovli"/>.
              </t>
              <t>
                The agent relays the answer message unchanged.
              </t>
            </list>
          </t>
        </section>
        <section title="Overload Report Handling">
          <t>
          </t>
          <figure anchor="pr-uc-basic2">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|                     |                     |
  2> |                     |-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
  3> |                     |<----- xxA OC-S-F:S--|                     |
     |                     |           OLR:Host  |                     |
  4> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |                     |                     |                     |
  5> |-- xxR OC-S-F:C----->|                     |                     |
     |       HR            |                     |                     |
  6> |                     |-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
     |                     |                     |                     |
  7> |                     |<----- xxA OC-S-F:S--|                     |
     |                     |           OLR:Host  |                     |
     |                     |                     |                     |
  8> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |                     |                     |                     |
  9> |-- xxR OC-S-F:C----->|                     |                     |
     |       RR            |                     |                     |
  10>|                     |-- xxR OC-S-F:C--------------------------->|
     |                     |       RR            |                     |
     |                     |                     |                     |
  11>|                     |<--------------------------- xxA OC-S-F:S--|
  12>|<--- xxA OC-S-F:S----|                     |                     |
     |                     |                     |                     |

    ]]>
            </artwork>
          </figure>
          <t>
            <list style="numbers">
              <t>
                The client originates a request with the OC-Supporting-Features
                AVP per <xref target="I-D.ietf-dime-ovli"/>.
              </t>
              <t>
                The agent relays the
                request unchanged to the server.
              </t>
              <t>
                The server, acting as the reporting node, has determined that
                it needs to request a reduction in traffic.  The server includes
                the OC-S-F AVP per <xref target="I-D.ietf-dime-ovli"/>.  In this
                case the loss algorithm is indicated as the abatement algorithm
                to be used for the included OC-OLR.  The server also includes the
                OC-OLR AVP to indicate the requested reduction in traffic.
              </t>
              <t>
                The agent saves overload state based on the presence of the
                OC-OLR AVP.  The agent will use this overload state for handling
                of future realm routed requests.
                The agent relays the answer message unchanged.  Upon receipt of
                the answer, the client saves overload state associated with the
                overload report.
              </t>
              <t>
                The client sends a request which includes the Destination-Host
                AVP with a value that matches the overload state stored.  In this
                case the request survives abatement and is sent to the agent.
                Handling of requests that do not survive abatement is dependent
                on the application.
              </t>
              <t>
                The agent relays the request based on the included Destination-Host
                AVP.
              </t>
              <t>
                The server generates an answer which includes the OC-S-F AVP and
                OC-OLR AVP.
              </t>
              <t>
                If the OC-OLR is a new overload report then the agent updates
                the overload state associated with the report.
                The agent relays the answer unchanged.
                The client determines if the OC-OLR is new.  If so, the client
                updates overload state.
              </t>
              <t>
                The client originates a realm-routed request.  The client cannot
                apply overload abatement to this request as it does not match
                any locally stored overload state (the assumption for this
                scenario is that a RRR overload report has not yet been sent.)
              </t>
              <t>
                The agent determines that there is overload state associated with
                this request.  The agent uses this overload state as input to
                routing decisions for the request.  In this case, it is assumed
                that the request would have been routed to S1 but is instead
                routed to S2 as a result of the overload report.
              </t>
              <t>
                Server S2 generates an answer message.
              </t>
              <t>
                The agent relays the answer.
              </t>
            </list>
          </t>


          <figure anchor="pr-uc-basic3">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|                     |                     |
     |                     |                     |                     |
  2> |                     |-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
     |                     |                     |                     |
  3> |                     |<----- xxA OC-S-F:S--|                     |
     |                     |           OLR:Host  |                     |
  4> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |                     |                     |                     |
  5> |-- xxR OC-S-F:C----->|                     |                     |
     |       RR            |                     |                     |
     |                     |                     |                     |
  6> |                     |-- xxR OC-S-F:C--------------------------->|
     |                     |                     |                     |
  7> |                     |<--------------------------- xxA OC-S-F:S--|
     |                     |                     |           OLR:Host  |
  8> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |         OLR:RRR     |                     |                     |
     |                     |                     |                     |

    ]]>
            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>, with the addition that
              server S2 also includes an overload report in the answer message.
            </t>
            <t>
              The agent determines that the available capacity of servers in
              the realm has been reduced to the degree that it must generate
              a Realm-Routed-Request overload report.  The agent adds this report
              to the answer message.  The client saves overload state associated
              with the new RRR overload report.  For the duration of the RRR
              overload report the client performs the requested abatement on
              realm-routed requests.
            </t>
          </list></t>

        </section>
        <section title="DOIC Specification Impacts">
          <t>
            The following is a list of behavior that needs to be reflected in
            the DOIC specification.
          </t>
          <t>
            <list style="symbols">
              <t>
                Reacting Node - Host Report: No change.
              </t>
              <t>
                Reacting Node - RRR Report: NEED TO VERIFY THAT RRR STATE
                IS SAVED AND THAT ABATEMENT LOGIC FOR RRR REPORT IS PROPERLY
                SPECIFIED.
              </t>
              <t>
                Agent: Save host overload report state.  QUESTION: IS THIS
                CATAGORIZED AS REACTING NODE FOR HOST REPORT?
              </t>
              <t>
                Agent: Use host overload report state as input to routing decisions
                for realm-routing request.  QUESTION: IS THE CATAGORIZED AS
                REACTING NODE BEHAVIOR FOR HOST REPORTS?
              </t>
              <t>
                Reporting Node - Host Report: No change.
              </t>
              <t>
                Reporting Node - RRR Report: Syntax for the OC-OLR AVP must support
                multiple OC-OLR AVPs in answer messages.
              </t>
            </list>
          </t>
        </section>

      </section>
      <section anchor="uc-chain" title="Chain of Agents" >
        <t>
         [Two agents in sequence. Agent closest to server performs
         realm-routed request abatement.]
        </t>
        <t>
          [steve: propose moving this to after the non supporting client usecase
          as there are two things that need to be addressed for agent chagnes --
          first that only the last agent in a chain becomes a reacting node
          to use host reports for routing changes.  Second, only the first
          agent in a chain becomes
          the reacting node for non supporting clients.]
        </t>
      </section>
      <section anchor="uc-partition" title="Partitioned Servers">
        <t>
          [steve: I think this is a separate use case as it requires different
          behavior in the last hop agent in that that agent does not have
          full visibility of all servers in the network and, as such, cannot
          generate RRR reports based on observing host reports.]
        </t>
      </section>
      <section anchor="uc-mixedcaps" title="Mixed Capabilities" >
        <t>
         [Single agent, different capabilities at client and server. Agent adapts oc-supported-features and olrs.]
        </t>
      </section>
      <section anchor="uc-non-supporting" title="Non-Supporting Nodes" >
        <t>
         [Category for several non-supporting node use cases.]
        </t>
        <section anchor="uc-nsclient" title="Non-Supporting Reacting Node" >
          <t>
           [Handling non-supporting clients.]
          </t>
        </section>
        <section anchor="uc-nsserver" title="Non Supporting Reporting NOde" >
          <t>
           [Agent acts as reporting node for a non-supporting server.]
          </t>
        </section>
        <section anchor="uc-nsagent" title="Non-Supporting Agent" >
          <t>
           [Two agents in sequence, one non-supporting. Show both with
           non-supporting agent nearest the server vs earlier in chain.]
          </t>
        </section>
      </section>
	<section anchor="uc-rate" title="Rate Algorithm" >
		<t>
			[Show implications of rate algorithm across an agent.]
		</t>
	</section>
	<section anchor="uc-agent-overload" title="Agent Overload" >
		<t>
			[Do we need this? May be covered sufficiently in agent overload draft.]
		</t>
    <t>
      [steve: If we are looking for normative language that goes into the DOIC
      spec then it is handled by the agent overload draft.]
    </t>
	</section>



    </section>
    <section title="Recommendation">
      <t>
       This section is to be completed once the document has been reviewed.
      </t>
    </section>
    <section title="Security Considerations">
      <t>
       [ToDO]
      </t>
    </section>
  </middle>
  <back>
<!-- References split into informative and normative -->
<!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
 (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References">
		&I-D.ietf-dime-ovli;
    &RFC4006;
    &RFC6733;
       <reference anchor='agent-overload'>
        <front>
          <title>Diameter Agent Overload</title>
          <author initials="S." surname="Donovan">
            <organization abbrev="Oracle">
                Oracle
                </organization>
          </author>
          <date month="March" year="2014"/>
        </front>
        <format type="TXT" octets="94506" target="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-donovan-dime-agent-overload-01.xml"/>
      </reference>
    </references>
    <references title="Informative References">
<!-- Here we use entities that we defined at the beginning. -->

      &RFC2629;

      &RFC3552;

      &RFC7068;

      <!-- A reference written by by an organization not a person.

      <reference anchor="DOMINATION"
   target="http://www.example.com/dominator.html">
 <front>
   <title>Ultimate Plan for Taking Over the World</title>

   <author>
     <organization>Mad Dominators, Inc.</organization>
   </author>

   <date year="1984" />
 </front>
      </reference>

      -->
    </references>
    <section anchor="app-additional" title="Additional Stuff">
      <t>
       This becomes an Appendix.
      </t>
    </section>
  </back>
</rfc>
