<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml2rfc.tools.ietf.org//public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml2rfc.tools.ietf.org//public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4006 SYSTEM "http://xml2rfc.tools.ietf.org//public/rfc/bibxml/reference.RFC.4006.xml">
<!ENTITY RFC6733 SYSTEM "http://xml2rfc.tools.ietf.org//public/rfc/bibxml/reference.RFC.6733.xml">
<!ENTITY RFC7086 SYSTEM "http://xml2rfc.tools.ietf.org//public/rfc/bibxml/reference.RFC.7068.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM
"http://xml2rfc.tools.ietf.org//public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
<!ENTITY RFC7068 PUBLIC ''
'http://xml2rfc.tools.ietf.org//public/rfc/bibxml/reference.RFC.7068.xml'>
<!ENTITY I-D.ietf-dime-ovli PUBLIC ''
'http://xml2rfc.tools.ietf.org//public/rfc/bibxml3/reference.I-D.draft-ietf-dime-ovli-02.xml'>
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-donovan-doic-agent-cases-00" ipr="trust200902">
<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
<!-- ***** FRONT MATTER ***** -->
  <front>
<!-- The abbreviated title is used in the page header - it is only necessary if the
  full title is longer than 39 characters -->
    <title abbrev="Abbreviated Title">Analysis of Agent Use Cases
      for Diameter Overload Information Conveyance (DOIC)</title>
<!-- add 'role="editor"' below for the editors if appropriate -->
<!-- Another author who claims to be an editor -->
    <author fullname="Steve Donovan" initials="S.R."
     surname="Donovan">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street/>
<!-- Reorder these if your country does things differently -->
          <city>Frisco</city>
          <region>Texas</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone>+1</phone>
        <email>srdonovan@usdonovans.com</email>
<!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Ben Campbell" initials="B."
     surname="Campbell">
      <organization>Oracle</organization>
      <address>
        <postal>
          <street/>
<!-- Reorder these if your country does things differently -->
          <city>Frisco</city>
          <region>Texas</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone>+1</phone>
        <email>ben@nostrum.com</email>
<!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <date month="April" year="2014" />
<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
  in the current day for you. If only the current year is specified, xml2rfc will fill
    in the current day and month for you. If the year is not the current one, it is
    necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
    purpose of calculating the expiry date).  With drafts it is normally sufficient to
    specify just the year. -->
<!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
<!-- WG name at the upperleft corner of the doc,
  IETF is fine for individual submissions.
    If this element is not present, the default is "Network Working Group",
  which is used by the RFC Editor as a nod to the history of the IETF. -->
    <keyword>template</keyword>
<!-- Keywords will be incorporated into HTML output
  files in a meta tag but they have no effect on text or nroff
  output. If you submit your draft to the RFC Editor, the
  keywords will be used for the search engine. -->
    <abstract>
      <t>
       The Diameter Overload Information Conveyance (DOIC) solution describes
       a mechanism for exchanging information about Diameter Overload among
       Diameter nodes. A DOIC endpoint is a Diameter node that acts as either
       a reporting node are a reacting node. A reporting node originates
       overload reports, requesting reacting nodes to reduce the amount of
       traffic sent. DOIC allows Diameter agents to act as reporting nodes,
       reacting nodes, or both, but does not describe agent behavior. This
       document explores several use cases for agents to participate in
       overload control, and makes recommendations for certain agent behaviors
       to be added to DOIC.
      </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" title="Introduction">
      <t>
       The <xref target="I-D.ietf-dime-ovli"> Diameter Overload Information
       Conveyance (DOIC) </xref> solution describes a mechanism for exchanging
       diameter overload information among Diameter nodes. DOIC defines the
       concept of a DOIC endpoint. A DOIC endpoint is a Diameter node that
       acts as either a reporting node or a reacting node. A reporting node
       originates overload reports, requesting reacting nodes to reduce the
       offered load. An overload report has a "type". The type of overload
       report determines the scope of the request for traffic reduction, and
       possibly other semantics.
      </t>
      <t>
       DOIC endpoints do not necessarily correspond to Diameter clients and
       servers. Any Diameter node that supports DOIC can be a DOIC endpoint.
       This includes Diameter agents, as well as Diameter clients and servers.
       However, DOIC does not currently describe how agents should behave as
       part of an overload control solution. This document explores several
       use cases for agents to participate in overload control, and makes
       recommendations for certain agent behaviors to be added to DOIC.
      </t>
      <section title="Terminology and Abbreviations">
        <t>
         <list style="hanging">
           <t hangText="Diameter Node:">
            A Diameter client, agent or server.
           </t>
           <t hangText="DOIC Endpoint:">
            A Diameter node that supports the DOIC solution and acts as either
            a reporting node, a reacting node, or both.
           </t>
           <t hangText="Reacting node:">
            A DOIC endpoint that can receive overload reports from a reporting
            node, and perform overload abatement. A DOIC endpoint can
            simultaneously be both a reacting node and reporting node.
           </t>
           <t hangText="Reporting node:">
            A DOIC endpoint that can send overload reports to a reacting node,
            requesting the reacting node to perform overload abatement.
           </t>
		   <t hangText="Transaction Client (TC)">
		   	A diameter node that originates a Diameter request. This is distinct
			from "Diameter Client" as used in RFC 6733. Note that a Diameter Server acts as
			a TC if and when it originates a request towards a Diameter Client.
		   </t>
		   <t hangText="TransactionServer (TS)">
		   	A diameter node that consumes a Diameter request, and responds with
			a Diameter answer. This is distinct from "Diameter Server" as used in RFC 6733.
			Note that a Diameter Client acts as
			a TS if and when it answers a request sent by a Diameter Server.
		   </t>
		   <t hangText="Client Application">
		   	The application that uses Diameter for various Authentication, Authorization,
		    and/or Accounting (AAA) functions. For example, a Network Access Server (NAS) performs
		    certain network attachment services, detachment services, packet forwarding, etc.
			These are collectively the NAS client application, which depends on Diameter for AAA
			services.
		   </t>
           <t hangText="Overload Abatement:">
            Actions taken by a reacting node to reduce the load offered to an
            overloaded Diameter node. The specific actions required to perform
            overload abatement are described by the DOIC algorithm. Overload
            abatement actions may involve local traffic reduction, or
            delegation of actions towards the client. Local traffic reduction
            can be achieved by either throttling a request or routing a
            request to a different destination.
           </t>
           <t hangText="Throttling">
            Overload abatement through the rejection of some number of requests.
			Throttling at an agent requires the agent to reject requests with
			appropriate error codes. Throttling at a transaction client requires
			the client to indicate appropriate errors to the client application
           </t>
			<t hangText="Diversion">
				Overload abatement through the routing of some number of requests
				away from an overloaded node towards one or more appropriate nodes
				that are less-overloaded.
			</t>
         </list>
        </t>
      </section>
    </section>
    <section anchor="deploy" title="Deployment Architectures">
      <t>
       This section outlines the deployment architectures used to
       determine agent related Diameter DOIC requirements.
      </t>
      <t>
       These deployment architectures include the use of Diameter agents to
       route Diameter requests between Diameter clients and Diameter servers.
      </t>
      <t>
        In all cases, a small number of client and server nodes are shown for
        simplicity.  Adding additional cleints and/or servers does not change
        the fundamental characteristics of the deployments.
      </t>
      <t>
        <xref target="deploy-arch1"/> shows an architecture with a single agent
        sitting between Diameter clients and Diamter servers.
      </t>
      <figure anchor="deploy-arch1">
        <artwork><![CDATA[

      +--+                +--+
      |C1|-----      -----|S1|
      +--+     \+--+/     +--+
                |A1|
      +--+     /+--+\     +--+
      |C2|-----      -----|S2|
      +--+                +--+

      ]]>
        </artwork>
      </figure>
      <t>
        <xref target="deploy-arch2"/> shows an architecture with a multiple agents
        sitting between Diameter clients and Diameter servers.
      </t>
      <figure anchor="deploy-arch2">
        <artwork><![CDATA[

      +--+                          +--+
      |C1|-----                -----|S1|
      +--+     \+--+      +--+/     +--+
                |A1|------|A2|
      +--+     /+--+      +--+\     +--+
      |C2|-----                -----|S2|
      +--+                          +--+

      ]]>
        </artwork>
      </figure>
      <t>
        <xref target="deploy-arch4"/> illustrates server partitioning.  In this case
        the agent determines the partition to which a request is routed
        based on the contents of the message.  For instance, the request might
        contain an indicator of a user to which the request applies.  All request for
        that user must be routed to the same server, or more generally that set of
        servers.
      </t>

      <figure anchor="deploy-arch4">
        <artwork><![CDATA[

      +--+                +--+
      |C1|-----      -----|S1|  > Server Partition 1
      +--+     \+--+/     +--+
                |A1|
      +--+     /+--+\     +--+
      |C2|-----      -----|S2|  > Server Partition 2
      +--+                +--+

      ]]>
        </artwork>
      </figure>
      <t>
        <xref target="deploy-arch3"/> shows a variation of the partitioned server
        architecture shown in <xref target="deploy-arch4"/>,
        with agents sitting in front of each partition.  This use
        case illustrates one instance where individual agents do not have a view
        of the overload status of all servers in the network.
      </t>
      <figure anchor="deploy-arch3">
        <artwork><![CDATA[

      +--+                +--+ -\
      |C1|-----      -----|S1|   |
      +--+     \+--+/     +--+   |
                |A1|              > Server Partition 1
      +--+     /+--+\     +--+   |
      |C2|-----  ||  -----|S2|   |
      +--+       ||       +--+ -/
                 ||
      +--+       ||       +--+ -\
      |C3|-----  ||  -----|S3|   |
      +--+     \+--+/     +--+   |
                |A2|              > Server Partition 2
      +--+     /+--+\     +--+   |
      |C4|-----      -----|S4|   |
      +--+                +--+ -/

      ]]>
        </artwork>
      </figure>
      <t><list><t>
       Note that only two partitions of the Diameter servers are shown. This
       is bending to the limitations of ASCII art for drawing complex
       deployment scenarios. It is possible, and even likely, that real world
       deployments will have more that two partitions of the servers for
       a Diameter application.
      </t></list></t>
      <t>
       This document focuses on deployments that involve agents.  It is, however,
       important that any changes to the DOIC solution introduced to support networks
       that contain agents also work when there is no agent sitting between Diameter
       clients and servers.
      </t>
    </section>
	<section anchor="abatement" title="Overload Abatement Methods">
	      <t>
	       When a Diameter node becomes overloaded, there typically must be a
	       reduction of the number requests of both categories, in order to have
	       the desired reduction of the overall offered-load. We refer to this
	   	   reductions as "Overload Abatement"
		</t>
		<t>In general, there are two ways to perform overload abatement. Perhaps the
			most obvious is to reject some number of Diameter requests, also known
			as "throttling". When a TC throttles traffic, it rejects or defers certain
			client application requests, as appropriate for the client application. When
			an agent throttles traffic, it rejects Diameter requests with appropriate
			error codes, so that the TC can behave correctly at the client application layer.</t>
			<t>
				A second way to abate overload is to route some fraction of requests from an
			    overloaded node to one or more eligible nodes that. For the purposes
			    of this draft, we refer to this abatement method as "Diversion".
			</t>
			<t>
			   There are a few architectural principles that should be considered when building Diameter
			networks to be resilient to overload, or when deploying DOIC into existing Diameter network:
			</t>
			<t><list style="symbols">
				<t>
					All things being equal, diversion SHOULD be preferred to throttling. Diversion
					allows more requests to succeed, which will have less negative impact on
					the client application. However, there are situations where diversion is
					not possible. For example, diversion is usually not possible for host-routed
					requests (see discussion). Diversion may not be helpful if all potential
					destinations are overloaded. If proprietary load balancing mechanisms are in use,
					diversion for DOIC purposes may be redundant with those mechanisms.
			    </t>
				<t>
					If diversion is performed, the diversion SHOULD occur as close as possible to the TS,
					preferably at a node that shares a direct transport connection with the TS. A directly
					connected peer is likely to have the most knowledge of alternative destinations and their
					current loads. If nodes
					further from the TS perform diversion, topology knowledge and overload state knowledge
					must be pushed further down the chain of Diameter nodes.
				</t>
				<t>
					Throttling SHOULD occur at the TC, or as close as possible to the TC.
					The TC has the best knowledge of the client application,
					and can choose to reject requests that have the lease impact on the client
					application, or provide the most effect for traffic reduction over time.
					Furthermore, throttling at the TC entirely avoids Diameter overhead for
					rejected requests. Each additional hop traversed by requests that will
					eventually be rejected increases the impact of those requests.
				</t>
			</list></t>

	</section>

    <section anchor="reporttypes" title="Diameter Routing">
     <t>
       Diameter supports <xref target="RFC6733">two primary methods</xref> for
       routing requests to a reporting node. Normally, Diameter nodes route
       requests based on the Destination-Realm and Application-Id AVP values.
       That is, they select a next hop from their Diameter peer table entry
       that matches the realm and application of the request. For the sake of
       this analysis, we refer to requests routed by this method as
       "realm-routed requests"
      </t>
      <t>
       A Diameter TC may also control the final destination of a request by
       inserting a Destination-Host AVP. When a node forwards a request that
       includes Destination-Host, it checks to see if it has a matching
       Diameter identity in its peer table. If so, it forwards the request to
       that peer. Otherwise, it follows the normal routing for the realm and
       application. We refer to requests routed this way as "host-routed
       requests".
      </t>
		<t>
			In general, throttling is the the only abatement technique that
			works for host-routed requests. Diversion is typically not possible,
			since only a single TS can handle the request.
		</t>
		<t><list><t>
	        There may be some
			exceptions to this rule. For example, a node might have multiple peer table entries that share
			the same Diameter Identity. A node might map Diameter identities
			in a way that results in multiple next-hop destinations for a given
			Destination-Host value.
		</t></list></t>
      <t>
       On the other hand, diversion is often useful for abating realm-routed traffic.
 	   Since realm-routed requests are not bound to a
       particular TS, it is often be possible to divert a number of them to other servers
       that are less overloaded.
      </t>

    </section>
    <section anchor="doic-uc" title="DOIC Use Cases">
      <t>
       This section outlines example use cases involving agents.  Each of
       these use cases will be evaluated with the goal of identifying any
       required changes to <xref target="I-D.ietf-dime-ovli"/> needed to
       support the use case.
      </t>
      <t>
       The following is the list of use cases considered. This is not an
       exhaustive list of DOIC use cases but is rather a list of use cases
       identified as being impacted by the presence of agents in the deployment.
      </t>
      <t>
       <list style="symbols">
         <t>
           Simple Agent - Overload capability announcement and overload report handling
           in a deployment with a single agent as illustrated in
           <xref target="deploy-arch1"/>.  In this case all Diameter nodes
           are assumed to support DOIC.  This use case is discussed in
           <xref target="uc-simple"/>.
           <vspace blankLines="1" />
           This use case includes four sub-cases:
           <list style="numbers">
             <t>
               OC Capability Announcement where the TC and Agent support the
               same OC capabilities.
             </t>
             <t>
               Host overload report handling for host-routed requests.  This
               case illustrates throttling of host-routed requests at the
               transaction client.
             </t>
             <t>
               Host overload report handling for realm-routed request and a
               single server.  This case illustrates throttling of host-routed
               requests at the agent that has a direct transport connection to
               the transaction server.
             </t>
             <t>
               Host overload report handling for realm-routed request and
               multiple server with agent diversion.  This case illustrates
               diversion of host-routed requests by the agent.
             </t>
             <t>
               Multiple host overload reports resulting in a realm overload report.
             </t>
           </list>
         </t>
         <t>
           Partitioned Servers - Overlaod capability announcement and overload report
           handling in a deployment using partitioned servers as illustrated
           in <xref target="deploy-arch3"/>.  In this case all Diameter nodes
           are assumed to support DOIC.  This use case is discussed in
           <xref target="uc-partition"/>.
           <vspace blankLines="1"/>
           This case illustrates one scenario where realm reports cannot be used.
         </t>
         <t>
           Mixed Capabilities - Overload capability announcement and overload report
           handling in deployments where agents support capabilities that are
           not included in the set of capabilities advertised by reacting
           nodes.This use case is discussed in
           <xref target="uc-mixedcaps"/>.
           <vspace blankLines="1"/>
           This use case illustrates one scenario where an agent consumes an overload
           report and replaces it with a new overload report of a different type.
         </t>
         <t>
           Non supporting DOIC nodes - Agent behavior in the face of Diameter
           nodes that do not support the DOIC solution.  These use cases are
           addressed in
           <xref target="uc-non-supporting"/>.  There are four sub-use
           cases that are addressed:
             <list style="symbols">
               <t>
                 Non supporting reacting node.  In this case a DOIC supporting agent
                 should handle overload abatement for the non supporting node.  An
                 agent or a reporting node can detect if there is a reacting node
                 in the path a request takes by the presence of the OC-Supported-Features
                 AVP in the request message.  This use case is discussed in
                 <xref target="uc-nsclient"/>.
               </t>
               <t>
                 Non supporting reporting node.  In this case a DOIC supporting agent
                 may act as the reporting node for any upstream non supporting Diameter
                 nodes (client or servers depending on the direction of the request).
                 In this case a DOIC supporting agent can detect if there is a reporting
                 node in the path
                 of the transaction by the presence of the OC-Supported-Features AVP
                 in the answer message for the transaction.  This use case is discussed in
                 <xref target="uc-nsserver"/>.
               </t>
               <t>
                 Non supporting agent between reacting node and a supporting agent.
               </t>
               <t>
                 Non supporting agent between a supporting agent and the reporting node.
                 In this case, the agent that supports DOIC cannot reliably divert
                 requests as a result of a host report.This use case is discussed in
                 <xref target="uc-nsagent"/>.
                 <vspace blankLines="1"/>
                 This use case illustrates when this deployment scenario is not
                 recommended.
               </t>
             </list>
         </t>
         <t>
           Inter domain or untrusted node authorization.
           <vspace blankLines="1"/>
           This use case illustrates one case where attribution of OC-Supported-Features
           AVP is required.
         </t>
         <t>
           [steve: i'm not convinced we need the following use cases]
           <list>
             <t>
               Chain of Agents - Overload capability announcement and overload report
               handling in a deployment with multiple agents between reacting nodes
               and reporting nodes as illustrated in <xref target="deploy-arch2"/>.
               In this case all Diameter nodes are assumed to support DOIC.
               This use case is discussed in
               <xref target="uc-chain"/>.
             </t>
             <t>
               Support for targeted overload reports [steve: only needed if this makes
               it into the based DOIC specification.]
             </t>
             <t>
               Hop-by-hop abatement algorithm.
               <vspace blankLines="1"/>
               This use case illustrates one case where attribution of OC-Supported-Features
               AVP is required.
             </t>
           </list>
         </t>
       </list>
      </t>

      <section anchor="uc-simple" title="Simple Agent">
        <t>
          This section addresses overload capability announcement and overload report handling
          in a deployment with a single agent as illustrated in
          <xref target="deploy-arch1"/>.
        </t>
        <t>
          This use case assumes that all nodes support DOIC and that all nodes
          support the same set of overload features.
        </t>
        <t>
          This use case includes four sub-cases:
          <list style="numbers">
            <t>
              OC Capability Announcement where the TC and Agent support the
              same OC capabilities.
            </t>
            <t>
              Host overload report handling for host-routed requests.  This
              case illustrates throttling of host-routed requests at the
              transaction client.
            </t>
            <t>
              Host overload report handling for realm-routed request and a
              single server.  This case illustrates throttling of host-routed
              requests at the agent that has a direct transport connection to
              the transaction server.
            </t>
            <t>
              Host overload report handling for realm-routed request and
              multiple server with agent diversion.  This case illustrates
              diversion of host-routed requests by the agent.
            </t>
            <t>
              Multiple host overload reports resulting in a realm overload report.
            </t>
          </list>
        </t>
        <section title="Capability Announcement">
          <t>
            This section explores capability announcement for the
            simple agent use case.
          </t>
          <t>
            This use case assumes that the capabilities supported by the TC and
            those supported by the agent are the same.  The scenario where different
            capabilities are supported in discussed in <xref target="uc-mixedcaps"/>.
          </t>
          <t>
            <xref target="pr-uc-basic1"/> shows the message flow for this use case.
          </t>
          <t>
            The nomenclature OC-S-F:x is short for OC-Supported-Feature with the ":x"
            indicating the Diameter node that inserted the AVP into the message.
          </t>
          <figure anchor="pr-uc-basic1">
            <artwork><![CDATA[

       +--+                       +-+                        +--+
       |TC|                       |A|                        |TS|
       +--+                       +-+                        +--+
        |                          |                          |
  1>    |-- xxR OC-S-F:C---------->|                          |
        |                          |                          |
  2>    |                          |-- xxR OC-S-F:C---------->|
        |                          |                          |
  3>    |                          |<---------- xxA OC-S-F:S--|
        |                          |                          |
  4>    |<-------- xxA OC-S-F:S----|                          |
        |                          |                          |
    ]]>
            </artwork>
          </figure>
          <t>
            <list style="numbers">
              <t>
                The transaction client (TC) originates a request.  The TC supports
                DOIC and, as
                such, includes the OC-Supported-Features AVP in all requests.  The
                OC-S-F AVP contains the clients capabilities.
              </t>
              <t>
                The agent inspects the OC-S-F AVP and determines that the agent
                does not support additional OC features.  The agent relays the
                request unchanged to the server.
                <list style="none"><t>
                  The scenario where the agent supports a different set of
                  DOIC features is addressed in <xref target="uc-mixedcaps"/>.
                </t>
                <t>
                  Note: It is an open question whether the agent needs to
                  include an indication that it also supports DOIC or if
                  attribution of the OC-S-F is needed.
                </t></list>
              </t>
              <t>
                The transaction server (TS), acting as the reporting node,
                inspects the OC-S-F AVP in
                the request and generates an OC-S-F to be included in the answer
                message.  This is done according to the behavior defined in the
                DOIC specification <xref target="I-D.ietf-dime-ovli"/>.
              </t>
              <t>
                The agent relays the answer message unchanged.
                <vspace blankLines="1"/>
                The presence of the OC-S-F header in the answer message indicates
                to the TC that it needs to be prepared for overlaod reports in
                subsequent requests of the same type.
                <list style="none"><t>
                  With the loss algorithm defined in <xref target="I-D.ietf-dime-ovli"/>
                  there is no explicit action required of the TC.  Stateful
                  abatement algorithms will likely action to be taken by the TC
                  to be able to handle subsequent overload reports.
                </t></list>
              </t>
            </list>
          </t>
        </section>
        <section title="Overload Report Handling">
          <t>
            This section addresses overload report handling
            in a deployment with a single agent as illustrated in
            <xref target="deploy-arch1"/>.
          </t>
          <t>
            The following three sub-cases are illustrated:
            <list style="symbols">
              <t>
                <xref target="pr-uc-basic2"/> shows the message flow illustrating
                handling of host reports for host-routed requests and realm-routed
                requests when there is a single transaction server.
              </t>
              <t>
                <xref target="pr-uc-basic4"/> shows the handling of host-routed
                requests when there is a second server to which requests can
                be diverted when one of the servers is in an overload state.
              </t>
              <t>
                <xref target="pr-uc-basic3"/> illustrates the agents behavior
                when it has received a host report from all servers.  In this case
                the agent generates a Realm report.  This is only possible when
                the agent has a view of the state of all servers in the Diameter
                network.
              </t>
            </list>
          </t>
          <t>
            In these message flows, "HR" under a request indicates that the request is
            host-routed.  "RR" indicates the request is realm-routed.  "OLR:Host"
            indicates an overload report of type Host.  "OLR:Realm" indicates an
            overload report of type Realm.
          </t>
          <figure anchor="pr-uc-basic2">
            <artwork><![CDATA[

    +-+                   +-+                   +-+
    |C|                   |A|                   |S|
    +-+                   +-+                   +-+
     |                     |                     |
  1> |-- xxR OC-S-F:C----->|                     |
     |                     |                     |
  2> |                     |-- xxR OC-S-F:C----->|
     |                     |                     |
  3> |                     |<----- xxA OC-S-F:S--|
     |                     |           OLR:Host  |
  4> |<--- xxA OC-S-F:S----|                     |
     |         OLR:Host    |                     |
     |                     |                     |
  5> |-- xxR OC-S-F:C---X  |                     |
     |       HR            |                     |
     |                     |                     |
  6> |-- xxR OC-S-F:C----->|                     |
     |       HR            |                     |
     |                     |                     |
  7> |                     |-- xxR OC-S-F:C----->|
     |                     |                     |
     |                     |                     |
  8> |                     |<----- xxA OC-S-F:S--|
     |                     |           OLR:Host  |
     |                     |                     |
  9> |<--- xxA OC-S-F:S----|                     |
     |         OLR:Host    |                     |
     |                     |                     |
  10>|-- xxR OC-S-F:C----->|                     |
     |       RR            |                     |
  11>|                     |-- xxR OC-S-F:C---X  |
     |                     |       RR            |
     |                     |                     |
  12>|<--- xxA Throttled---|                     |
     |                     |                     |
     |                     |                     |
  13>|-- xxR OC-S-F:C----->|                     |
     |       RR            |                     |
     |                     |                     |
  14>|                     |-- xxR OC-S-F:C----->|
     |                     |       RR            |
     |                     |                     |
  15>|                     |<----- xxA OC-S-F:S--|
     |                     |           OLR:Host  |
     |                     |                     |
  16>|<--- xxA OC-S-F:S----|                     |
     |         OLR:Host    |                     |
     |                     |                     |
    ]]>
            </artwork>
          </figure>
          <t>
            <list style="numbers">
              <t>
                Same as in <xref target="pr-uc-basic1"/>.
              </t>
              <t>
                Same as in <xref target="pr-uc-basic1"/>.
              </t>
              <t>
                The server, acting as a reporting node, has determined that
                it needs to request a reduction in traffic.  The server includes
                the OC-S-F AVP per <xref target="I-D.ietf-dime-ovli"/>.  In this
                case the loss algorithm is indicated as the abatement algorithm
                to be used for the included OC-OLR.  The server also includes the
                OC-OLR AVP to indicate the requested reduction in traffic.
              </t>
              <t>
                The agent saves overload state based on the presence of the
                OC-OLR AVP.  The agent will use this overload state for handling
                of future realm routed requests.
                <vspace blankLines="1"/>
                The agent relays the answer message unchanged.  Upon receipt of
                the answer, the client saves overload state associated with the
                overload report.
                <list style="none">
                  <t>
                    Note: This is behavior that it not yet specified in the DOIC
                    specification.  It is based on the principle that only nodes
                    with a direction transport connnection to an overloaded host
                    should throttle those requests as other nodes earlier in the
                    requests path do not have the topology knowledge to know if
                    diversion of the request would have been successful.
                  </t>
                </list>
              </t>
              <t>
                The client invokes the requested overload abatement algorithm
                on host-routed requests.  This step illustrates a host-routed
                request that is throttled.
                The client gives application appropriate feedback to the
                client application.
              </t>
              <t>
                Host-routed requests that are not rejected due to the requested reduction
                in traffic, as shown in this step, are handled the same as if there
                where no overload report for the host to which the request is routed.
              </t>
              <t>
                The agent relays the request based on the included Destination-Host
                AVP.
              </t>
              <t>
                The server generates an answer which includes the OC-S-F AVP and
                OC-OLR AVP.
              </t>
              <t>
                If the OC-OLR is a new overload report then the agent updates
                the overload state associated with the report.
                The agent relays the answer unchanged.
                <vspace blankLines="1" />
                The client determines if the OC-OLR is new.  If so, the client
                updates overload state.
              </t>
              <t>
                The client originates a realm-routed request.  The client cannot
                apply overload abatement to this request as it does not match
                any locally stored overload control state (the assumption for this
                scenario is that a realm overload report has not yet been sent.)
              </t>
              <t>
                The agent determines that there is overload state associated with
                this request (the host report received from S).
                The agent uses this overload state as input to
                routing decisions for the request.  In this case it is assumed
                that there is no alternative route to divert request toward and, as
                such, the agent throttles the reqeust.
              </t>
              <t>
                The agent generates an error response indicating that the request
                was throttled and should not be retried.
              </t>
              <t>
                The client originates another realm-routed request.
              </t>
              <t>
                The agent determines that there is overload state associated with
                this request (the host report received from S).
                The agent uses this overload state as input to
                routing decisions for the request.  In this case the request
                is not throttled and is routed to S.
              </t>
              <t>
                S generates an answer message.
              </t>
              <t>
                The agent relays the answer.
              </t>
            </list>
          </t>

          <figure anchor="pr-uc-basic4">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|                     |                     |
     |                     |                     |                     |
  2> |                     |-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
  3> |                     |<----- xxA OC-S-F:S--|                     |
     |                     |           OLR:Host  |                     |
  4> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |                     |                     |                     |
  5> |-- xxR OC-S-F:C----->|                     |                     |
     |       RR            |                     |                     |
  6> |                     |-- xxR OC-S-F:C--------------------------->|
     |                     |       RR            |                     |
     |                     |                     |                     |
  7> |                     |<--------------------------- xxA OC-S-F:S--|
     |                     |                     |                     |
  8> |<--- xxA OC-S-F:S----|                     |                     |
     |                     |                     |                     |

    ]]>
            </artwork>
          </figure>
          <t>
            <list style="numbers">
              <t>
                Same as in <xref target="pr-uc-basic1"/>.
              </t>
              <t>
                Same as in <xref target="pr-uc-basic1"/>.
              </t>
              <t>
                Same as in <xref target="pr-uc-basic1"/>.
              </t>
              <t>
                Same as in <xref target="pr-uc-basic1"/>.
              </t>
              <t>
                The client originates a realm-routed request.  The client cannot
                apply overload abatement to this request as it does not match
                any locally stored overload state (the assumption for this
                scenario is that a realm overload report has not yet been sent.)
              </t>
              <t>
                The agent determines that there is overload state associated with
                this request (the host report received from S1).
                The agent uses this overload state as input to
                routing decisions for the request.  In this case, it is assumed
                that the request would have been routed to S1 but is instead
                routed to S2 as a result of the overload report.
              </t>
              <t>
                Server S2 generates an answer message.
              </t>
              <t>
                The agent relays the answer.
              </t>
            </list>
          </t>
          <figure anchor="pr-uc-basic3">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|                     |                     |
     |                     |                     |                     |
  2> |                     |-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
     |                     |                     |                     |
  3> |                     |<----- xxA OC-S-F:S--|                     |
     |                     |           OLR:Host  |                     |
  4> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |                     |                     |                     |
  5> |-- xxR OC-S-F:C----->|                     |                     |
     |       RR            |                     |                     |
     |                     |                     |                     |
  6> |                     |-- xxR OC-S-F:C--------------------------->|
     |                     |                     |                     |
  7> |                     |<--------------------------- xxA OC-S-F:S--|
     |                     |                     |           OLR:Host  |
  8> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |         OLR:Realm   |                     |                     |
     |                     |                     |                     |

    ]]>
            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>.
            </t>
            <t>
              Same as in <xref target="pr-uc-basic2"/>, with the addition that
              server S2 also includes an overload report in the answer message.
            </t>
            <t>
              The agent determines that the available capacity of servers in
              the realm has been reduced to the degree that it must generate
              a Realm overload report.  The agent adds this report
              to the answer message.  The client saves overload state associated
              with the new Realm overload report.  For the duration of the Realm
              overload report the client performs the requested abatement on
              realm-routed requests.
            </t>
          </list></t>

        </section>
        <section anchor="uc-simple-impacts" title="DOIC Specification Impacts">
          <t>
            The following is a list of behavior that needs to be reflected in
            the DOIC specification.
          </t>
          <t>
            <list style="symbols">
              <t>
                There can be multiple reacting nodes for a single overload report.
                A DOIC TC or a DOIC agent when the TC does not support DOIC
                handle abatement of host-routed requests.  A DOIC node with
                a direct transport connection to an overloaded host handles abatement
                of realm-routed requests that would normally be routed to the
                overloaded host.
              </t>
              <t>
                Syntax for the OC-OLR AVP must support multiple OC-OLR AVPs in
                answer messages.
              </t>
              <t>
                Must define a Diameter-Throttled error response that indicates
                that the request was rejected due to overload and that the request
                should not be retried .
              </t>
<!--
              <t>
                Reacting Node - Host Report:
              </t>
              <t>
                Reacting Node - Realm Report: NEED TO VERIFY THAT Realm STATE
                IS SAVED AND THAT ABATEMENT LOGIC FOR Realm REPORT IS PROPERLY
                SPECIFIED.
              </t>
              <t>
                Agent: Save host overload report state.  QUESTION: IS THIS
                CATAGORIZED AS REACTING NODE FOR HOST REPORT?  WE COULD DEFINE
                INDICATE THAT ANY NODE THAT RECIEVES A HOST REPORT IS A
                REACTING NODE IF IT HAS A DIRECT CONNECTION TO THE REPORTING NODE
                OR IF IT CAN ORIGINATE HOST ROUTED REQUESTS TOWARD THE REPORTING
                NODE.
              </t>
              <t>
                Agent: Use the host overload report state as input to routing decisions
                for realm-routing request.  QUESTION: IS THE CATAGORIZED AS
                REACTING NODE BEHAVIOR FOR HOST REPORTS?  THIS CAN BE COVERED BY
                DEFINING A REACTING NODE FOR HOST REPORTS AS ABOVE AND THEN DEFINING
                THE BEHAVIOR OF A REACTING NODE TO DO THROTTLING ON REALM-ROUTED REQUESTS
                ONLY IF THE REACTING NODE HAS A DIRECT CONNECTION TO THE HOST.
              </t>
              <t>
                Reporting Node - Host Report: No change.
              </t>
              <t>
                Reporting Node - Realm Report: Syntax for the OC-OLR AVP must support
                multiple OC-OLR AVPs in answer messages.
              </t>
-->
            </list>
          </t>
        </section>

      </section>

      <section anchor="uc-partition" title="Partitioned Servers">
        <t>
          [STEVE: I'M NOT CONVINCED THAT THESE USE CASES DRIVE ANY
          NEW PROTOCOL BEHAVIOR.  THE ONLY THING THEY ILLUSTRATE IS
          AGENT BEHAVIOR FOR PARTITIONING.  I SUGGEST WE REMOVE IT UNLESS
          WE FIND SOMETHING IN THE PREVIOUS SECTIONS THAT NEEDS ONE OF
          THESE USE CASES AS JUSTIFICATION.]
        </t>
        <t>
          This use case is based on the basic partitioning deployment
          architecture illustrated in <xref target="deploy-arch4"/>.
        </t>
        <t>
          This use case illustrates that there are scenarios where a Realm
          overload report cannot be used.
        </t>
        <section title="Capability Announcement">
          <t>
            This section explores the capability announcement requirements for the
            partitioned server use case.
          </t>
          <t>
            <xref target="pr-uc-part1"/> illustrates capability announcement for the
            partitioned server use case.  There is nothing surprising in this
            use case for capability announcement.  The reacting node must be prepared to
            received OC-Supported-Feature AVPs from multiple servers.  This, however,
            is the case for non partitioned scenarios as well.
          </t>

          <figure anchor="pr-uc-part1">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
  2> |<-----xxA OC-S-F:S1--|<-----xxA OC-S-F:S1--|                     |
     |                     |                     |                     |
  3> |-- xxR OC-S-F:C----->|-- xxR OC-S-F:C--------------------------->|
     |                     |                     |                     |
  4> |<-----xxA OC-S-F:S2--|<---------------------------xxA OC-S-F:S2--|
     |                     |                     |                     |

  ]]>
            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              The client (reacting node) originates a request that the agent routes to the
              partition handled by server S1.
            </t>
            <t>
              The server (reporting node) generates and answer that is relayed
              by the agent.
            </t>
            <t>
              The client (reacting node) originates a request that the agent routes to the
              partition handled by server S2.
            </t>
            <t>
              The server (reporting node) generates and answer that is relayed
              by the agent.
            </t>
          </list></t>
        </section>
        <section anchor="report-handling" title="Overload Report Handling">
          <t>
            This section explores the impacts of the partitioned case on the handling of
            overload reports.
          </t>
          <t>
            <xref target="pr-uc-part2"/> illustrates the message flow that occurs
            when one of the servers, or more generally, when one of the partitions
            becomes overloaded.
          </t>
          <t>
            [steve: probably need to explain that in the case that the partition
            containes more than one server the agent will first try to route
            abated requests to an alternative server and will only reject them if
            there is not alternative route.]
          </t>
          <t>
            In this case, server S1 becomes overloaded and send a loss overload report.
            Upon receipt of subsequent realm-routed requests targeted for that
            partition, the agent is responsible for applying overload abatement
            for realm-routed requests, as illustrated in <xref target="uc-simple"/>.  In this
            case there is no alternative route for the request.
          </t>
          <t>
            <xref target="uc-simple"/> shows the agent generating an Realm overload
            report in a similar scenario.  The agent cannot generate an Realm report
            in this case as it would incorrectly lead to requests that would be
            routed to the S2 partition being throttled when the S2 server is
            not overloaded.  As a result, the agent must reject requests
            that to not pass the abatement algorithm.
          </t>
          <figure anchor="pr-uc-part2">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
  2> |<-----xxA OC-S-F:S1--|<-----xxA OC-S-F:S1--|                     |
     |          OLR:Host   |          OLR:Host   |                     |
     |                     |                     |                     |
  3> |-- xxR OC-S-F:C----->|                     |                     |
     |       RR            |                     |                     |
     |                     |                     |                     |
  4> |<--- xxA OC-S-F:S----|                     |                     |
     |         Reason: Diameter-Throttled        |                     |
     |                     |                     |                     |

  ]]>
            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              The reacting node generates a request that is routed to S1.  S1 is
              the only server in the partition.
            </t>
            <t>
              S1 reports host overload.  Both A and C save overload state based
              on the received host report.
            </t>
            <t>
              C originates a realm-routed request.
            </t>
            <t>
              A applies overload abatement logic and determines that this request
              must be abated.  A first determines that there is no alternative
              route for the message.  S2 is not overloaded in this scenario but
              A is unable to route the request ot S2 because needs to be handled by
              a server in partition 1.  As a result
              A must reject the request, indicating that the request was rejected
              as a result of overload abatement throttling.
            </t>
          </list></t>
          <t>
            <xref target="pr-uc-part3"/> illustrates the case where servers
            in both partitions are overloaded.  In a non partitioned case this
            would result in a realm overload report being generated.  This
            is not likely to be feasible in this case as the level of overload
            in each partition might be very different and there is no way to
            report overload on a subset of servers in the realm.
          </t>
          <figure anchor="pr-uc-part3">
            <artwork><![CDATA[

    +-+                   +-+                  +--+                  +--+
    |C|                   |A|                  |S1|                  |S2|
    +-+                   +-+                  +--+                  +--+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
  2> |<-----xxA OC-S-F:S1--|<-----xxA OC-S-F:S1--|                     |
     |          OLR:Host   |          OLR:Host   |                     |
     |                     |                     |                     |
  3> |-- xxR OC-S-F:C----->|-- xxR OC-S-F:C--------------------------->|
     |       RR            |                     |                     |
     |                     |                     |                     |
  4> |                     |<--------------------------- xxA OC-S-F:S--|
     |                     |                     |           OLR:Host  |
  5> |<--- xxA OC-S-F:S----|                     |                     |
     |         OLR:Host    |                     |                     |
     |                     |                     |                     |
  6> |-- xxR OC-S-F:C----->|                     |                     |
     |       RR            |                     |                     |
     |                     |                     |                     |
  7> |<--- xxA OC-S-F:S----|                     |                     |
     |         Reason: Diameter-Throttled        |                     |
     |                     |                     |                     |

  ]]>
            </artwork>
          </figure>
          <t>
            [NEED TO ADD DESCRIPTION OF STEPS.  THIS MIGHT BE A BETTER
            FLOW TO TO REPLACE THE PREVIOUS ONE.]
          </t>
          <t>
            [NEED TO ILLUSTRATE THAT AN AGENT MIGHT NOT KNOW STATUS OF
            ALL SERVERS]
          </t>
        </section>
        <section anchor="uc-partition-impacts" title="DOIC Specification Impacts">
          <t>
            Agent must have the ability to reject realm-routed requests indicating
            that the request was rejected due to overload abatement.
          </t>
          <t>
            [steve: this could be handled in a generic way by saying that any reacting
            node that did not originate the request throttles the request using
            the indicated response error code.]
          </t>
          <t>
            Reacting nodes must recognize the Diameter-Throttled error code, indicating that the
            request should not be re-attempted on an alternative route.  The error
            should be interpretted as a final failure for the transaction.
          </t>
          <t>
            [steve: need to verify there is strong enough wording to indicate
            that this is a scenario that Realm reports cannot be used.]
          </t>
        </section>

      </section>
      <section anchor="uc-mixedcaps" title="Mixed Capabilities" >
        <t>
          This use case explores the impact of having a different set of
          DOIC capabilities supported by the reacting node that originates a
          request and and agents in the path of the request.
        </t>
        <section title="Capability Announcement">
          <t>
            <xref target="pr-uc-mixed1"/> illustrates the case.  In this figure,
            "OC-S-F:C"  indicates it carries the set of capabilities supported by C.
            "OC-S-FC:AC" indicates the merged capabilities of C and A.
            In most cases this merging will be a union
            of capabilities.  The exception will be when there are
            conflicting capabilities. "OC-S-FC:S"
            indicates S's response to the AC set of capabilities.  OC-S-FC:AS
            indicates A's modification to S.  This is needed in the case where S's
            capabilities are not compatible with C's.
          </t>
          <t>
            [steve: question for doic specification -- do we need guidance that
            specifications for new capabilities must indicate merging logic?]
          </t>
          <figure anchor="pr-uc-mixed1">
            <artwork><![CDATA[

           +-+                        +-+                        +-+
           |C|                        |A|                        |S|
           +-+                        +-+                        +-+
            |                          |                          |
      1>    |-- xxR OC-S-F:C---------->|                          |
            |                          |                          |
      2>    |                          |-- xxR OC-S-F:AC--------->|
            |                          |                          |
      3>    |                          |<---------- xxA OC-S-F:S--|
            |                          |                          |
      4>    |<-------- xxA OC-S-F:AS---|                          |
            |                          |                          |
        ]]>
            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              C originates a request including the OC-S-F AVP indicating the
              DOIC features supported by C.
            </t>
            <t>
              A inspects OC-S-F:C and determines that A supports features not
              included.  A relays the request, replacing the OC-S-F APV with
              an AVP that indicates the merged capabilities of A and C.
            </t>
            <t>
              S responds to the set of advertised features with the OC-S-F:S
              AVP.  There is no change in S's behavior beyond what is specified in
              <xref target="I-D.ietf-dime-ovli"/> and any other extensions documenting
              the features in the received OC-S-F AVP.
            </t>
            <t>
              A inspects OC-S-F:S.  If necessary A replaces OC-S-F:S with OC-S-F:S'.
              <vspace blankLines="1"/>
              <xref target="pr-uc-mixed2"/> illustrates one case were A replaces
              OC-S-F:S with OC-S-F:S'.
            </t>
          </list></t>
        </section>
        <section title="Mixed Overload Report Type Handling">
          <t>
            <xref target="pr-uc-mixed2"/> illustrates one specific type of mixed
            capabilities.  In this case, C only supports the loss abatement
            algorithm, A supports both loss and rate and S selects rate.
          </t>
          <figure anchor="pr-uc-mixed2">
            <artwork><![CDATA[

           +-+                        +-+                        +-+
           |C|                        |A|                        |S|
           +-+                        +-+                        +-+
            |                          |                          |
      1>    |-- xxR OC-S-F:C---------->|                          |
            |       loss               |                          |
            |                          |                          |
      2>    |                          |-- xxR OC-S-F:AC--------->|
            |                          |       loss, rate         |
            |                          |                          |
      3>    |                          |<---------- xxA OC-S-F:S--|
            |                          |                rate      |
            |                          |                          |
      4>    |<-------- xxA OC-S-F:AS---|                          |
            |              loss        |                          |
        ]]>

            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              C originates a request with OC-S-F AVP inicating support for only the
              loss abatement algorithm.
            </t>
            <t>
              A inspects the OC-S-F AVP and determins it needs to advertise support
              for additional capabilities.  A removes C's OC-S-F AVP and inserts
              a new OC-S-F AVP indicating support for both the loss and rate
              algorithms.
            </t>
            <t>
              S responds, including an OC-S-F AVP indicating that the rate algorithm
              will be used for overload reports.
            </t>
            <t>
              A determines that C does not support the rate algorithm and, as such,
              includes an OC-S-F AVP indicating that the loss abatement algorithm
              will be used for overload
              reports sent to C.  This implies that A is able to handle rate based
              overload reports.  How this is done is implementation specific.  It
              can mean that A handles all abatement resulting from the rate OLR in
              a similar fashion as discussed in <xref target="uc-nsclient"/>.  It can also mean
              that A will send loss reports to C in an attempt to conform to the
              requested reduction contained in the rate OLR.
            </t>
          </list></t>
        </section>
        <section title="DOIC Specification Impacts">
          <t>
            Agent must have the ability to replace the OC-S-F AVP in request messages.
          </t>
          <t>
            Agent must have the ability to replace the OC-S-F AVP in answer messages.
          </t>
          <t>
            Agent must have the ability to replace the OC-OLR AVP in answer messages.
          </t>
        </section>

      </section>
      <section anchor="uc-non-supporting" title="Non-Supporting Nodes" >
        <t>
         This section outlines the impact of agent based scenarios where there
         is a node that does not support DOIC in the path of a request.  There
         are four variations of this use case:
        </t>
        <t><list style="numbers">
          <t>
            Non supporting transaction client.
          </t>
          <t>
            Non supporting transaction server.
          </t>
          <t>
            Non supporting agent between the transaction client and a DOIC agent.
          </t>
          <t>
            Non supporting agent between a DOIC agent and the transaction server.
          </t>
          <t>
            Non suupporting agent between DOIC agents.
          </t>
        </list></t>
        <section anchor="uc-nsclient" title="Non-Supporting Transaction Client" >
          <t>
           This section outlines the handling of non supporting transaction client.
          </t>
          <t>
            This use case is illustrated in <xref target="non-supp-client"/>.  In
            this case assume that C1 supports DOIC and C2 does not support DOIC.
          </t>
          <figure anchor="non-supp-client">
            <artwork><![CDATA[

          +--+                +--+
          |C1|-----      -----|S1|
          +--+     \+--+/     +--+
                    |A1|
          ****     /+--+\     +--+
          *C2*-----      -----|S2|
          ****                +--+

          ]]>
            </artwork>
          </figure>
          <t>
            <xref target="non-supp-cl1"/> illustrates capability announcement for
            both the supporting and non supporting client.
          </t>
          <t>
            There is no change from
            the simple agent use case for transactions originated by C1.
          </t>
          <t>
            For transactions originated by the non supporting reacting node C2, A
            determines that C2 does not support DOIC by the absence of an OC-S-F
            AVP and inserts an OC-S-F AVP indicating the OC features supported by A.
          </t>
          <figure anchor="non-supp-cl1">
            <artwork><![CDATA[

    +--+                  ****                  +-+                   +-+
    |C1|                  *C2*                  |A|                   |S|
    +--+                  ****                  +-+                   +-+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C--------------------------->|-- xxR OC-S-F:C----->|
     |                     |                     |                     |
  2> |<---------------------------xxA OC-S-F:S---|<-----xxA OC-S-F:S---|
     |                     |                     |                     |
  3> |                     |-- xxR ------------->|                     |
     |                     |                     |                     |
  4> |                     |                     |-- xxR OC-S-F:A----->|
     |                     |                     |                     |
  5> |                     |                     |<-----xxA OC-S-F:S---|
     |                     |                     |                     |
  6> |                     |<------------- xxA---|                     |
     |                     |                     |                     |

  ]]>
            </artwork>
          </figure>
          <t><list>
            <t>
              C1 supports DOIC and, as such, includes the OC-S-F AVP in all
              request messages sent.  A relays the request to S based on
              normal request handling.
              <vspace blankLines="1"/>
              Note that this scenario assumes that the capabilities supported
              by C1 and A are the same.
            </t>
            <t>
              S supports DOIC and, as such, includes the OC-S-F AVP in all
              response messages sent.  A relays the answer to C1 based on
              normal answer handling.
            </t>
            <t>
              C2 does not support DOIC and, as such, does not insert the OC-S-F
              AVP into request messages.
            </t>
            <t>
              A does support DOIC and recognizes that
              the request does not contain the OC-S-F AVP.  A then inserts
              an OC-S-F AVP that reflects the OC capabilities of A.
            </t>
            <t>
              S does normal DOIC capability announcement handling, inserting
              the OC-S-F AVP in the answer.
            </t>
            <t>
              A removes the OC-S-F AVP from the answer given that C2 does not
              support DOIC.
            </t>
          </list></t>
          <t>
            <xref target="non-supp-cl2"/> illustrates overload report handling
            for this scenario.
          </t>
          <t>
            There is no change in overload handling for requests originated by
            C1.  C1 is responsible for abatement of host routed requests and A
            is responsible for abatement of realm-routed requests.
          </t>
          <t>
            For requests originated by C2, it becomes the responsibility of A
            to handle overload abatement requested by S.  In this case A is
            responsible for abatement of both host-routed and realm-routed
            requests, as A has a direct transport connection to S.  If there
            were an upstream DOIC agent between A and S then A would no longer
            have a direct transport connection and would not be able to
            do abatement of realm-routed requests.  It would become the responsibility
            of the upstream DOIC agent with the transport connection to handle
            abatement of realm-routed requests.
          </t>
          <figure anchor="non-supp-cl2">
            <artwork><![CDATA[

    +--+                  ****                  +-+                   +-+
    |C1|                  *C2*                  |A|                   |S|
    +--+                  ****                  +-+                   +-+
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C--------------------------->|-- xxR OC-S-F:C----->|
     |                     |                     |                     |
  2> |<---------------------------xxA OC-S-F:S---|<-----xxA OC-S-F:S---|
     |                     |          OLR        |          OLR        |
     |                     |                     |                     |
     |HR abatement handled by C1                 |RR abatement handled by A
     |                     |                     |                     |
  3> |                     |-- xxR ------------->|-- xxR OC-S-F:A----->|
     |                     |                     |                     |
  4> |                     |<------------- xxA---|<-----xxA OC-S-F:S---|
     |                     |                     |          OLR        |
     |                     |                     |                     |
     |                     |                     | HR and RR abatement |
     |                     |                     | handled by A        |
     |                     |                     |                     |
  5> |                     |-- xxR ------------->|-- xxR OC-S-F:A----->|
     |                     |                     |                     |
  6> |                     |<------------- xxA---|<-----xxA OC-S-F:S---|
     |                     |                     |          OLR        |
     |                     |                     |                     |
  7> |                     |-- xxR ------------->|                     |
     |                     |                     |                     |
  8> |                     |<------------- xxA---|                     |
     |                     |               Diameter-Throttled          |
     |                     |                     |                     |

  ]]>
            </artwork>
          </figure>
          <t><list style="numbers">
            <t>
              Request from a supporting reacting node.
            </t>
            <t>
              Response indicating the reporting node is requesting a reduction in
              traffic sent due to an overload condition.
              <vspace blankLines="1"/>
              The reacting node C is responsible for abatement of host-routed requests
              and A is responsible for abatement of realm-routed requests.
            </t>
            <t>
              Request from a non supporting node.  A inserts an OC-S-F AVP.
            </t>
            <t>
              Response indicating that the reporting node is overloaded.  A stores
              overload state based on the content of the overload report.  A also
              removed the OC-S-F adn OC-OLR AVPs from the answer message.
              <vspace blankLines="1"/>
              A is
              responsible for abatement handling of all requests originated by C2.
            </t>
            <t>
              Request from non supporting node originated after the overload report
              is received.  In this case the request is not throttled by A.
            </t>
            <t>
              Response for message that survived abatement by A.
            </t>
            <t>
              Request from non supporting node originated after the overload report
              is received.  In this case the request does not survive throttling
              and is rejected by A.
            </t>
            <t>
              Response for request that did not survive abatement by A.
            </t>
          </list></t>
        </section>
        <section anchor="uc-nsserver" title="Non Supporting Transaction Server" >
          <t>
            This section shows the case where there is a mix of transaction servers
            that support DOIC and those that do not support DOIC.
          </t>
          <t>
            In this case, it becomes the responsibility of a DOIC agent to
            become the reporting node for the non-supporting transaction server.
            The method the agent uses to determine if abatement of traffic
            is required for the non supporting node is implementation specific.
          </t>
          <figure anchor="non-supp-server">
            <artwork><![CDATA[

          +--+                +--+
          |C1|-----      -----|S1|
          +--+     \+--+/     +--+
                    |A1|
          +--+     /+--+\     ****
          |C2|-----      -----*S2*
          +--+                ****


          ]]>
            </artwork>
          </figure>
          <figure anchor="non-supp-server2">
            <artwork><![CDATA[

    +-+                   ---                  +--+                  ****
    |C|                   |A|                  |S1|                  *S2*
    +-+                   ---                  +--+                  ****
     |                     |                     |                     |
  1> |-- xxR OC-S-F:C----->|-- xxR OC-S-F:C----->|                     |
     |                     |                     |                     |
  2> |<-----xxA OC-S-F:S---|<-----xxA OC-S-F:S---|                     |
     |                     |          OLR        |                     |
     |                     |                     |                     |
  3> |-- xxR OC-S-F:C----->|                     |                     |
     |                     |                     |                     |
  4> |                     |-- xxR OC-S-F:C--------------------------->|
     |                     |                     |                     |
  5> |                     |<-----------------------------------xxA ---|
     |                     |                     |                     |
  6> |<-----xxA OC-S-F:A---|                     |                     |
     |          OLR        |                     |                     |
     |                     |                     |                     |

  ]]>
            </artwork>
          </figure>
          <t>
            <list style="numbers">
              <t>
                Normal DOIC processing.
              </t>
              <t>
                Normal DOIC processing.
              </t>
              <t>
                Normal DOIC processing
              </t>
              <t>
                Normal DOIC processing.  The agent doesn't know that S2
                doesn't support DOIC.
              </t>
              <t>
                S2 does not support DOIC and, as a result, does not insert
                the OC-S-F AVP in the answer message.
              </t>
              <t>
                The answer message does not contain an OC-S-F AVP.  A then takes
                on resposibility for becoming the reporting node for S2.  In this
                case A has determined that S2 is in an overload condition and
                inserts an OC-OLR AVP in the answer message.
                <vspace blankLines="1"/>
                C handles the OC-OLR overload report in the same way it handles
                all OC-OLR reports.
              </t>
            </list>
          </t>
        </section>
        <section anchor="uc-nsagent" title="Non-Supporting Agent" >
          <t>
            There are two sub-cases for non-supporting agents.
          </t>
          <t>
            <xref target="non-supp-agent1"/> illustrates the first non supporting
            agent case, where the first agent in a chain of agents does not support
            DOIC.
          </t>
          <t>
            In this case, A2 picks up the responsibility of handling overload
            abatement in the case that either C1 or C2 do not support DOIC.
          </t>
          <t>
            A2 is also responsible for abating realm routed requests for host
            reports received from S1 or S2.
          </t>
          <figure anchor="non-supp-agent1">
            <artwork><![CDATA[

          +--+                          +--+
          |C1|-----                -----|S1|
          +--+     \****      +--+/     +--+
                    *A1*------|A2|
          +--+     /****      +--+\     +--+
          |C2|-----                -----|S2|
          +--+                          +--+


          ]]>
            </artwork>
          </figure>
          <t>
            <xref target="non-supp-agent2"/> illustrates the second non supporting
              agent case, where the last agent in the chain does not support
              DOIC.
          </t>
          <t>
            In this scenario, there is
            no DOIC node that has a direct transport connection with S1 and S2.
            As a result, there is no DOIC node that can handle abatement of
            realm-routed requests resulting from a host overload report from
            the transaction servers.
          </t>
          <t>
            As a result, it is recommended that this deployment scenario be
            avoided.
          </t>
          <figure anchor="non-supp-agent2">
            <artwork><![CDATA[

          +--+                          +--+
          |C1|-----                -----|S1|
          +--+     \+--+      ****/     +--+
                    |A1|------*A2*
          +--+     /+--+      ****\     +--+
          |C2|-----                -----|S2|
          +--+                          +--+

          ]]>
            </artwork>
          </figure>
        </section>
        <section title="DOIC Specification Impacts">
          <t>
            <list style="symbols">
              <t>
                Agents must be able to insert OC-S-F AVPs into request and answer
                messages.
              </t>
              <t>
                Agents must be able to remove OC-S-F AVPs from request and answer
                messages.
              </t>
              <t>
                Agents must be able to insert OC-OLR AVPs of type Host Report into answer
                messages.  The ability to insert OC-ORL AVPs of thye Realm Report is
                already assumed.
              </t>
              <t>
                Agents must be able to remove OC-OLR AVPs from answer
                messages.
              </t>
              <t>
                Agents must be able to abate host-routed requests.
              </t>
            </list>
          </t>
        </section>
      </section>
      <section title="Inter Domain Authorization">
        <t>
        </t>
      </section>
      <section title="Not needed use cases">
        <section anchor="uc-chain" title="Chain of Agents" >
          <t>
            [steve: propose moving this to after the non supporting client usecase
            as there are two things that need to be addressed for agent changes --
            first that only the last agent in a chain becomes a reacting node
            to use host reports for routing changes.  Second, only the first
            agent in a chain becomes
            the reacting node for non supporting clients.]
          </t>
        </section>
      	<section anchor="uc-rate" title="Rate Algorithm" >
      		<t>
      			[Show implications of rate algorithm across an agent.]
      		</t>
          <t>
            [steve: I'm not sure we need this scenario.  We have already established
            that the agent needs to have overload state for host reports.  The fact that
            agents might have to save transaction state as a result of the host report
            will need to be covered in the rate draft.]
          </t>
      	</section>
      	<section anchor="uc-agent-overload" title="Agent Overload" >
      		<t>
      			[Do we need this? May be covered sufficiently in agent overload draft.]
      		</t>
          <t>
            [steve: If we are looking for normative language that goes into the DOIC
            spec then it is handled by the agent overload draft.]
          </t>
      	</section>
      </section>
    </section>
    <section title="Recommendations">
      <t>
       This section is to be completed once the document has been reviewed.
      </t>
      <t><list style="symbols">
        <t>
          Agents may replace OC-S-F AVPs in request messages.
        </t>
        <t>
          Agents may replace OC-S-F AVPs in answer messages.
        </t>
        <t>
          Agents may add Realm reports into answer messages.
        </t>
        <t>
          Answer messages must be able to have multiple overload reports.
        </t>
        <t>
          Request may be rejected using the Diameter-Rejected response code.
        </t>
        <t>
          Agents are reacting nodes for host reports.
        </t>
        <t>
          When there is no active Realm report for a realm, then
          Realm-routed requests must be throttled by reacting nodes that
          have direct connections with the reporting node that generated the
          host report.
        </t>
        <t>
          Agents may handle overload abatement for non DOIC nodes.
        </t>
        <t>
          Agents may serve as reporting node for non DOIC nodes.
        </t>
      </list></t>
	<section anchor="general-recommendations" title="General Recommendations">
		<t>This section describes recommendations that apply to the DOIC mechanism in general:</t>
		<t>The working group should define a "Diameter-Throttled" error code, that indicates a request
			has failed due to overload, and should not be retried. (See <xref target="uc-simple-impacts" />.) 
		</t>
		<t>
			Reacting nodes must recognize the Diameter-Throttled error code, and interpret it as a
			final failure for the transaction. (See <xref target="uc-partition-impacts" />.)
		</t>
		<t>
			The OC-OLR AVP syntax must allow multiple occurrences in the same Diameter answer message.
			(See <xref target="uc-simple-impacts" />.)
		</t>

	</section>
	<section anchor="relay-behavior" title="Agent Behavior Recommendations">
		<t>
			The discussion in <xref target="abatement"/>, <xref target="reporttypes"/>, and <xref target="doic-uc" /> suggest certain
		    recommendations for DOIC supporting Diameter relay behavior. The authors recommend that language
		    be added to <xref target="I-D.ietf-dime-ovli" /> to the general effect of the following sections:
		</t>
		
	<section anchor="ocsf-recommendations" title="Capabilites Exchange Behaviors">
		<t>This section describes recommended Agent behaviors with respect to the OC-Supported-Features AVP.</t>
		<t>A DOIC supporting agent acts as a reporting-node, a reacting-node, or both.</t>
		<t>
			An agent that acts as a reacting node MUST include an OC-Supported-Features in each Diameter 
			request that it forwards in that role.
			If the inbound request included an OC-Supported-Features AVP, the relay MAY copy its content to 
			the one in the outbound request, or MAY modify the contents if it wishes to indicate
			different DOIC capabilities to upstream nodes. If the inbound request did not
			contain an OC-Supported-Features AVP, the agent MUST insert one into the outbound
			request, indicating the DOIC capabilities of the agent itself.
		</t>
		<t>
			An agent that acts as a reporting node MUST include an OC-Supported-Features AVP in each Diameter answer
			that it forwards in that role. If the agent modified the OC-Supported-Features AVP in the associated request,
			it MUST perform a reciprocal modification of the OC-Supported-Features AVP in the response.
		</t>
		<t>
			An agent that does not support the DOIC mechanism is likely to forward an OC-Supported-Features AVP without 
			modification. A DOIC node MUST be able to tell between an OC-Supported-Features AVP that was forwarded by
			such a non-supporting agent, and one inserted or copied by a DOIC-supporting node [ref?].
		</t>
    </section>	
	<section anchor="olr-recommendations" title="Overload Report Behaviors">	
		<t>
			When a DOIC-supporting relay inserts an OC-Supported-Features AVP
			(or passes through one received from downstream),
			it becomes responsible for ensuring that any OLRs it receives from upstream
			nodes are honored. It can honor an OLR by locally performing overload abatement, delegating
			abatement to downstream nodes, or a combination of both.
		</t>
		<t>
			If a relay can honor the OLR by locally diverting traffic, it SHOULD do so before resorting
			to throttling. For example, if a relay
			receives a realm report from its upstream peer, and has other less-overloaded peers that
			are valid for the realm and application, it diverts traffic to the less overloaded peers
			as needed. The relay SHOULD apply any knowledge it has of the peers' relative load and capacity
			in determining how to divert traffic.
		</t>
		<t>
			When an overload condition requires throttling of traffic, an agent SHOULD delegate that
			throttling to downstream nodes if at all possible. Depending on local policy and the nature
			of the overload condition, this means the agent either originates a new OLR to send downstream,
			or forwards an OLR received from upstream. For example, if a relay receives a host report (which usually
			requires traffic throttling), the relay typically forwards that report downstream. The relay MAY modify
			the report based on local policy.
		</t>
		<t>
			If an agent needs to perform local throttling, it MUST explicitly reject each throttled request
			with a "Diameter-Throttled" error code. (See <xref target=
			"uc-simple-impacts" /> and <xref target="uc-partition-impacts" />.)
		</t>
		<t><list><t>
			There may be circumstances where an agent must perform local throttling. An obvious example
			is when  downstream nodes do not support DOIC, that is, requests from downstream nodes do not contain
			OC-Supported-Features AVPs. Mismatched upstream and downstream capabilities could require local
			throttling. For example, if a relay uses a rate-limiting abatement algorithm upstream, but downstream
			devices do not support rate-limiting, it may have to locally throttle traffic to meet
			its upstream abatement commitment. It might still invoke the "loss" algorithm downstream in order
			to reduce the amount of traffic that must be locally throttled.
		</t></list></t>
		<t>
			A relay SHOULD apply all the information at hand to determine upstream overload. For example,
			if a relay receives a host-report from a directly attached TS, that relay can reasonable infer that
			the overload condition applies to all traffic for the realm and application, and also abate
			realm-routed requests that it knows would go to the overloaded TS. A relay might also have knowledge
			of the overload or load state of other nodes through some non-DOIC mechanism.
		</t>
		<t>
			Finally, a relay SHOULD NOT generate or forward OLRs in a way likely to cause redundant abatement. For example,
			if a relay locally throttles traffic due to a "loss" algorithm OLR, it should not forward the OLR downstream
			where other nodes will also apply abatement to the same traffic.
		</t>
		<t><list><t>
			The idea of redundant abatement is at least somewhat specific to the algorithm. For example, a rate-limiting
			algorithm might allow both local and delegated abatement, since the algorithm creates a maximum rate limit.
			On the other hand, the "loss" algorithm requests a percentage reduction. If a relay receives an OLR for
			a 10 percentage reduction, applies local throttling, and also forwards the OLR downstream, the 10% reduction
			may be applied twice.
		</t></list></t>
</section>
	</section>

    </section>
    <section title="Security Considerations">
      <t>
       [ToDO]
      </t>
    </section>
  </middle>
  <back>
<!-- References split into informative and normative -->
<!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
 (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References">
		&I-D.ietf-dime-ovli;
    &RFC4006;
    &RFC6733;
       <reference anchor='agent-overload'>
        <front>
          <title>Diameter Agent Overload</title>
          <author initials="S." surname="Donovan">
            <organization abbrev="Oracle">
                Oracle
                </organization>
          </author>
          <date month="March" year="2014"/>
        </front>
        <format type="TXT" octets="94506" target="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-donovan-dime-agent-overload-01.xml"/>
      </reference>
      <reference anchor='DOIC-rate'>
       <front>
         <title>Diameter Agent Overload</title>
         <author initials="S." surname="Donovan">
           <organization abbrev="Oracle">
               Oracle
               </organization>
         </author>
         <author initials="E." surname="Noel">
           <organization abbrev="AT&amp;T">
               AT&amp;T
               </organization>
         </author>
         <date month="February" year="2014"/>
       </front>
       <format type="TXT" octets="94506" target="http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-donovan-dime-doc-rate-control-00.xml"/>
     </reference>

    </references>
    <references title="Informative References">
<!-- Here we use entities that we defined at the beginning. -->

      &RFC2629;

      &RFC3552;

      &RFC7068;

      <!-- A reference written by by an organization not a person.

      <reference anchor="DOMINATION"
   target="http://www.example.com/dominator.html">
 <front>
   <title>Ultimate Plan for Taking Over the World</title>

   <author>
     <organization>Mad Dominators, Inc.</organization>
   </author>

   <date year="1984" />
 </front>
      </reference>

      -->
    </references>
    <section anchor="app-additional" title="Additional Stuff">
      <t>
       This becomes an Appendix.
      </t>
    </section>
  </back>
</rfc>
